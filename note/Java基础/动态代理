https://mp.weixin.qq.com/s/18kwZsmdaE5m6CveSGQQlA
代理模式
1.介绍
    定义:给目标对象提供一个代理对象，并由代理对象控制目标对象的引用
    作用:通过引入代理对象的方式来间接访问目标对象
    解决的问题:防止直接访问目标对象给系统带来不必要的复杂性
2.静态代理和动态代理的区别
    静态代理:由程序员创建或特定工具自动生成源代码，也就是在编译时就已经将接口，被代理类，代理类等确定下来。在程序运行之前，代理类的.class文件就已经生成
    动态代理:代理类在程序运行时创建的代理方式被成为动态代理，相比于静态代理， 动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类中的方法
3.动态代理的实现步骤
     一句话说明：动态代理是在通过Proxy类的newProxyInstance方法创建了一个代理对象,这个方法中传入三个主要参数：
        1.目标类的classLoader对象；
        2代理类的class对象；
        3.创建代理的实现类对象InvocationHander(回调invoke方法,通过具体类接口执行真正的逻辑)
    具体示例如下
        1.创建目标实例
            ILawyer xiaoming = new XiaoMing();
        2.创建代理接口对象InvocationHandler,并实现invoke方法,代理接口持有目标接口的引用。将代理类的实现交给 InvocationHandler类作为具体的实现
            DynamicProxy dynamicProxy = new DynamicProxy(xiaoming);//这是一个InvocationHandler类,实现了invoke方法
        3.获取目标接口的ClassLoader对象
            ClassLoader classLoader = xiaoming.getClass().getClassLoader();
        4.通过Proxy.newProxyInstance方法动态创建代理接口对象
            ILawyer lawyer = (ILawyer)Proxy.newProxyInstance(classLoader, new Class[]{ILawyer.class}, dynamicProxy);

            //return (T) proxy.newProxyInstance(ClassLoader loader, Class<?>[] interfaces,  InvocationHandler invocationHandler)
            // 可以解读为：getProxyClass(loader, interfaces) .getConstructor(InvocationHandler.class).newInstance(invocationHandler);
        5.使用代理接口实现具体逻辑
            //律师提交诉讼申请
            lawyer.submit();
            //律师进行举证
            lawyer.burden();
            //律师代替小明进行辩护
            lawyer.defend();
            //诉讼完成
            lawyer.finish();

4.动态代理原理
    动态代理会在运行时再创建代理类和其实例，因此效率较低；
    要完成这个场景，需要在运行期间动态创建一个Class，JDK提供了Proxy来完成这个事情：
    1.定义抽象角色
        interface Api{
            void test(String a);
        }
    2.真实角色
        class ApiImpl{
            @Override
            public void test(String a){
                System.out.println("真实实现："+a)
            }
        }
    3.创建真实角色实例
        ApiImpl api = new ApiImpl();
    4.JDK动态代理
        Proxy.newProxyInstance(getClass.getClassLoader(),
            new Class[]{Api.class}
            ,new InvocationHandler{
                @override
                public Object invoke (Object proxy,Method method,Object[] args){
                    //执行对象的真实方法
                    return method.invoke(api,args)
                }
            })

    实际上，Proxy.newProxyInstance会创建一个Class，与静态代理不同，这个Class并不是由java源码编译而来，
    即没有真正的文件，只是在内存中按照Class格式生成了一个Class