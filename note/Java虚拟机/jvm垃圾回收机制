https://www.cnblogs.com/aspirant/p/8662690.html
垃圾回收器GC,即Garbage Collection，GC的两个职能：1.检测垃圾；2.回收垃圾
一.检测垃圾
    背景介绍：
        JVM内存结构包括五大区域：程序计数器、虚拟机栈、本地方法栈、堆、方法区
        其中程序计数器、虚拟机栈、本地方法栈属于线程私有区域，堆和方法区属于线程共享区域。堆和方法区的内存是动态分配和回收都是动态,所以垃圾回收重点关注这两块区域

    1.引用计数算法
        原理：给每个对象增加一个引用计算器,每引用一次计数加1，引用失效就-1。简单高效
        缺点:很难解决对象之间相互引用的问题
    2.可达性分析算法
        原理:从GC Roots根节点开始持续找这些节点的引用节点,当所有的引用节点寻找完毕之后,剩余节点就是不可达的节点，即需要被回收的节点
        Java语言中,可作为GC Roots节点的对象包括以下几种
            1.虚拟机栈中引用的对象
            2.方法区中类静态属性引用的对象
            3.方法区中常量引用的对象
            4.本地方法栈中JNI引用的对象
        GCRoots根结点演示
        public class GCRoots{
            Object o =new Object(); //o不是GCRoots,方法运行完以后，o可回收。
            static Object GCRoot1 =new Object(); //GC Roots---方法区中 类静态属性的对象
            final  static Object GCRoot2 =new Object();//GCRoots---方法区中 常量的对象

            public static void main(String[] args) {
                //可达
                Object object1 = GCRoot1; //注意：“ = ” 不是赋值，在对象中是引用，传递的是右边对象的地址
                Object object2 = object1;
                Object object3 = object1;
                Object object4 = object3;
            }
            public void method1(){
                //不可达（方法运行完后可回收）
                Object object5 = o;//o不是GCRoots
                Object object6 = object5;
                Object object7 = object5;
            }
            //本地变量表中引用的对象
            public void stack(){
                Object ostack =new Object();    //本地变量表的对象
                Object object9 = ostack;
                //以上object9 在方法没有(运行完)出栈前都是可达的
            }
        }
    3.对象的四种引用状态
        1.强引用
            只要强引用存在,虚拟机永远不会回收被引用的对象
        2.软引用SoftReference
            内存溢出之前，会将这些对象列进回收范围进行第二次回收;如果这次回收后还没有足够的内存，就会抛出OOM
            使用场景：如果内存充足,GC就保留,内存不足,GC再来收集的功能很适合用于缓存
        3.弱引用WeakReference
            若只被弱引用关联的对象(没有其他强引用关联它)只能生存到下一垃圾回收之前。当垃圾回收器工作时,无论当前内存是否足够,都会回收掉被弱引用关联的对象
            适用场景:ThreadLocal,静态内部Handler持有外部Activity的弱引用,leakcanary
            弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被JVM回收，这个软引用就会被加入到与之关联的引用队列中
        4.虚引用PhantomReference
            一个对象是否有虚引用,完全不对其生存时间构成影响。它的作用是用于监测该对象是否已经从内存中被删除
            虚引用必须和引用队列关联使用,当垃圾回收器准备回收一个对象时,如果发现他还有虚引用,就会把这个虚引用加入到与之关联的引用队列中
            程序可以通过判断引用队列中是否已经加入了虚引用,来了解一个对象是否将要被回收,以此来决定在回收之前是否要采取必要的行动

        引用计数法和可达性分析算法都是基于强引用而言的

    4.对象死亡前的最后一次挣扎
        要真正宣告一个对象的死亡，至少要经历两次标记过程
        1.通过可达性分析后，没有和GC Root相连接的引用链，将会被第一次标记
        2.第一次标记后,再次进行筛选,如果对象在finalize方法中与引用链重新建立了关联关系，那它将逃离本次回收

    5.方法区判断是否需要回收
        方法区回收的主要内容有：废弃的常量和无用的类
        废弃的常量可以用可达性分析得到，而无用的类需要满足3个条件
            1.该类的所有实例都已经被回收
            2.加载该类的所有ClassLoader已经被回收
            3.该类的java.lang.Class对象没有在任何地方被引用,无法在任何地方通过反射访问到该类的方法

二.回收垃圾
    1.垃圾回收的算法分类
        1.标记-清除算法Mark-Sweep
            a.标记要清除的对象
            b.清除已标记的对象
          缺点
            a.效率问题：标记和清除的效率都比较慢
            b.空间问题:清除之后会产生大量的内存碎片
        2.复制算法copying
            将内存分为大小相等的两块，每次只使用其中的一块,当发生垃圾回收时,就将还存活的对象从一块复制到另一块中,
            然后把已使用的内存块清空，这样使得每次都只对半个区域进行回收
            优点：解决标记-清除算法的不足
            缺点：空间利用率低下
        3.标记整理算法Mark-compact
            a.标记要清除的对象
            b.将还存活的对象全部都向一端移动,然后直接清理掉边界以外的内存
        4.分代收集算法
            分代收集算法是目前大部分JVM的垃圾收集器采用的算法,它的核心思想就是根据对象存活的生命周期将内存划分为若干不同的区域，采用不同的算法进行回收
        一般情况将堆区划分为
            年轻代(新生代,Young Generation)：年轻代的回收算法以复制算法为主,因为新生的对象存活率低

                a.所有新生产的对象首先都是放在年轻代的
                b.年轻代内存按照8:1:1的比例分为一个Eden区和两个survivor区。大部分对象在Eden区中生成,
                    回收时先将Eden区中存活的对象复制到survivor0中,同时清空剩余的Eden区内存
                    如果Survivor0中内存也满了时,会将Eden空间和Survivor0中存活的对象复制到survivor1中
                    然后清空eden和survivor0,然后再讲survivor0和survivor1区交换，保持survivor1空闲,如此反复
                c.如果复制到survivor1时,survivor1空间不足,就将存活对象放到老年代，如果老年代空间也满了时就触发一次Full GC(Major GC),也就是新生代,老年代都回收
                d.新生代发生GC也叫做Minor GC，MinorGC发生频率比较高,不一定等Eden满了才触发

            老年代(Tenured Generation)：老年代的算法以标记整理为主,因为老年代对象存活率高
                a.在年轻代经历了N次垃圾回收仍然存活的对象，就会被放到老年代中,因此可认为老年代中都存放一些生命周期比较长的对象
                b.老年代比年轻代内存大很多，大概2:1,当老年代内存满时触发Full Gc

            永久代(持久代，Permanet Generation)
                用于存放静态文件,如java类,方法等,持久代也称为方法区

    2.常见的垃圾收集器
        1.Serial
        2.ParNew
        3.Parallel Scavenge
        //以下是老年代
        4.CMS
        5.Serial Old(MSC)
        6.Parallel Old

    3.GC是什么时候触发的
        由于对象进行了分代处理,因此垃圾回收区域、时间也不一样。GC有两种类型Scavenge GC和Full GC
        1.新生代GC,Scavenge Gc(Minor Gc)
            新对象生成，并且在Eden申请空间失败时会触发Scavenge GC
        2.老年代GC,Full GC(Major GC)
            对整个堆进行整理包括Young、Tenured和Perm,所以比Scavenge GC效率慢，可能触发Full GC的条件
                a.老年代被写满
                b.永久带被写满
                c.System.gc被显示调用
                d.上一次GC之后Heap的各域分配策略动态变化

    4.垃圾回收会产生怎样的影响
        CPU阻塞