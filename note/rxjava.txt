本文记录Rxjava相关的知识点
https://www.jianshu.com/u/c50b715ccaeb
https://github.com/rengwuxian/RxJavaSamples
https://www.jianshu.com/p/f54f32b39b7c
一、简介
1.RxJava是什么
	a lirary for composing asynchronous and event-based programs using observable sequences for the Java VM
	一个在java VM上使用可观测的序列来组成异步的、基于时间的程序的库
	优点：逻辑简洁
	
二、API介绍和原理简析
1.扩展的观察者模式
	RxJava的四个基本概念：Observable(可观察者、被观察者)、Observer(观察者)、subscribe(订阅)、事件。
	Observable和Observer通过subcribe方法实现订阅关系，从而Observable可以在有需要的时候发出事件来通知observer。
2.基本实现
	2.1 Observable被观察者(上游)，决定什么时候出发事件及触发怎样的事件。
		Observable.create方法创建被观察者，通过ObservableEmitter发送事件。
		上游可以无限发送多个onNext,下游也可以接收无限个onNext;上游发送onComplete(onError)后，上游继续发，下游不再接收了；
	
	2.2 Observer观察者(下游)，决定事件触发时将有怎样的行为。实现方法onNext、onCompleted、onError
		onSubscribe实现方法中的Disposable：用于终止下游接收数据;但是调用了dispose上游还是会继续发送事件
		Observer的抽象类Subscriber:实现方式一致,但有如下不同点：
			onStart总在subscribe所发生的线程被调用。且在subscribe刚开始，事件未发生前调用(如数据清零)
			unsubscribe,可在onPause时调用这个方法解除Observable对subscriber的引用以避免内存泄漏。
	
	2.3	subscribe 
		只有调用了observable.subscribe(observer)后事件才开始被发送
		subscribe的重载方法：
			public final Disposable subscribe() {}下游不关心上游发送的数据
			下游只关心onNext事件
			public final Disposable subscribe(Consumer<? super T> onNext) {}
			public final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> onError) {} 
			public final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> onError, Action onComplete) {}
			public final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> onError, Action onComplete, Consumer<? super Disposable> onSubscribe) {}
			下游关心onSubscribe、onNext、onError、onComplete事件
			public final void subscribe(Observer<? super T> observer) {}
			
三、Rxjava线程
1.改变上游Observable发送事件的线程用subscribeOn，改变下游Observer接收事件的线程用observeOn
2.多次调用subscribeOn只有第一次生效。多次调用observeOn，每次都会生效
3.Rxjava内置的线程有：
    Schedulers.io() 代表io操作的线程, 通常用于网络,读写文件等io密集型的操作
    Schedulers.computation() 代表CPU计算密集型的操作, 例如需要大量计算的操作
    Schedulers.newThread() 代表一个常规的新线程
    AndroidSchedulers.mainThread() 代表Android的主线程
4.网络请求中如果有多次Disposable，可以调用CompositeDisposable.add将它添加到容器中，在退出的时候调用
	CompositeDisposable.clear()就可以切断所有的水管。
	
四、Rxjava操作符
1.map:对上游发送的每一个事件应用一个函数，使得每一个事件都按照指定的函数去变化。如把一个list中所有的int变成String
2.flatMap:将一个发送事件的上游Observable变换成为多个发送事件的Observable,然后将他们发射的事件合并后放进到一个单独的Observable里
   但是flatMap不保证事件的顺序，要保证事件顺序的话需要用concatmap
   
五、Zip操作符
1.Zip通过一个函数将多个发送的Observable事件结合到一起，然后发送这些组合到一起的事件，它按照严格的顺序应用这个函数，
它只发射与发射数据最少的那个Observable一样多的数据。
2.在同一个线程里，是按照先后顺序发射数据的，所以先发射所有的Observable1，然后每发射一个Observable2的数据就组合一下,直到数据最少的Observable被组合完
但在多线程中两个Observable是同时发射数据并组合的，直到数据最少的Observable数据被组合完。
3.Zip给每个Observable都准备了一个"水缸"，用来保存这些事件。默认水缸的大小是128个事件。水缸内部采用队列实现。
	
六、Backpressure背压：用于控制流量
1.上游狂发事件，而下游处理事件速度较慢，当水缸满了,容易OOM
2.同步情况下：上游每发送一个事件必须等到下游接收处理完了后才能发送下一个事件。如上游下游都在同一个线程，上游设置延迟可以防止OOM
  异步情况下:上游(如io线程)发送数据不需要等待下游(UI线程)接收，所以通过"水缸"来存储,但是水缸容易满，也就容易OOM。
  同步和异步的区别仅仅在于是否有水缸。
  
3.治理上下游流速不均衡问题通过人工控制有以下两种方案(主要是异步情况下容易造成)：
	一：数量上治理，减少放进水缸的事件数量，控制上游发送速度。sample按间隔时间取样发送或者filter过滤事件
	二：速度上治理，上游每次发送事件后都延迟2秒
		
七、Flowable治理背压
1.上下游由Observable和Observer变成了Flowable和Subscriber,水管之间的连接还是通过subscribe
2.上游增加了一个参数如BackpressureStrategy.ERROR，下游设定了一次处理事件的能力subscription.request(n)
3.针对上游发送事件过快，有从数量上取胜的两种策略，Drop和Latest，Drop是直接把存不下的事件丢弃，Latest就是保留最新的事件
4.上游调用emitter.request可以判断下游的处理能力，request()告诉上游它的处理能力(下游调用多次request结果取和)，上游每发送一个onNext事件后，requested就减一
5.request:下游处理事件的能力
    同步代码中(上下游在同一个线程)如果下游没有调用request，上游就认为下游没有处理事件的能力，所以上游发送一个事件后就会抛异常MissingBackpressure
    异步代码中下游不调用request，Flowable会有一个默认的大小为128的水缸，当上游发送第129个事件的时候而下游不消费事件，还是会抛异常


















