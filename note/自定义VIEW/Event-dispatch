#https://www.jianshu.com/p/2be492c1df96
https://www.jianshu.com/p/e99b5e8bd67b
#本文主要记录事件分发流程和原理
    整个事件传递流程经历Activity-->viewGroup-->view三个视图层级
    三个重要方法
    dispatchTouchEvent,onInterceptTouchEvent,onTouchEvent

我们的手指触摸到屏幕时,会触发一个ACTION_DOWN事件,当前Activity会最先做出反应,即回调Activity的dispatchTouchEvent方法

1.这里先讲解ACTION_DOWN的事件，暂不考虑ACTION_MOVE和ACTION_UP做最后的分析
    图解：images/ui/EventDispatch_ACTION_DOWN.png.png
    当点击事件落在Activity的某一个点时
        从Activity的dispatchTouchEvent开始分发
            return true/false，事件由Activity消费
            return super,即调用getWindow.superDispatchTouchEvent(),其实是调用了这个Activity的DecorView开始进行事件传递

        ViewGroup的dispatchTouchEvent方法
            return true,事件在这里被消费掉
            return false,事件由上一级Activity的onTouchEvent方法处理，表示不分发
            return super,事件由当前ViewGroup的onInterceptTouchEvent方法处理,问问是不是要拦截
                onInterceptTouchEvent决定是不是要拦截这个事件
                    return true,表示拦截，事件由ViewGroup的onTouchEvent方法处理
                    return false/super,事件由下一级的View的onDispatchTouchEvent方法处理

        View的dispatchTouchEvent方法
            return true,事件在这里消费，不再传递
            return false,事件由上一级的ViewGroup的onTouchEvent方法处理，表示View不想处理这个事件
            return super,事件由当前View的onTouchEvent方法处理

        View的onTouchEvent方法
            return true,事件在这里消费
            return false/super,事件传递给上一级ViewGroup的onTouchEvent方法处理

        ViewGroup的onTouchEvent方法
            return true,事件在这里消费
            return false/super,事件传递给上一级Activity的onTouchEvent方法处理

    ACTION_DOWN的事件传递小结：
        1.如果事件不中断，整个事件是一个U型图
        2.只要dipatchTouchEvent方法或onTouchEvent方法返回true，事件就停止传递了
        3.dispatchTouchEvent返回false(不再向子View分发事件)和onTouchEvent方法返回false(不消费事件,继续向父控件流动),事件都会传给父控件的onTouchEvent处理
        4.dispatchTouchEvent、onInterceptTouchEvent、onTouchEvent、ViewGroup、View这些方法默认实现就会让整个事件按照U型完整走完

    ViewGroup和View的ACTION_DOWN的事件目标小结
        1.自己消费，终结传递 -->return true
        2.给自己的onTouchEvent处理-->调用super.dispatchTouchEvent，系统默认调用onInterceptTouchEvent，
            当onIntercepterEvent返回true的时候，就会把事件分给自己的onTouchEvent处理了
        3.传给子View--->调用super.dispatchTouchEvent方法，系统默认调用onIntercepteEvent方法
            当onInterceptTouchEvent返回false的时候，就会把事件传给子View的onDispatchTouchEvent方法了
        4.不传给View,事件终止往下传递，事件开始回溯，从父View的onTouchEvent开始事件从下往上回归执行每个控件的onTouchEvent -->返回false

2.关于ACTION_MOVE和ACTION_UP

    1.某个控件的dispatchTouchEvent返回true消费终结事件，那么收到ACTION_DOWN的函数也能收到ACTION_MOVE和ACTION_UP
    2.在哪个View的onTouchEvent返回true，那么ACTION_MOVE和ACTION_UP的事件从上往下传到这个View后就不再往下传递了
        而是直接传给自己的onTouchEvent并结束本次事件传递过程

    ACTION_MOVE和ACTION_UP小结
        1.ACTION_DOWN事件在哪个控件消费了(return true),那么ACTION_MOVE和ACTION_UP就会从上往下把事件分发下传，
            当传到这个控件时，就不再继续往下传了。
        2.如果ACTION_DOWN事件是在dispatchEvent消费，那么事件到此为止停止传递，图解images/ui/dispatchEventReturnTrue_ACTION_MOVE.png
        3.如果ACTION_DOWN事件是在onTouchEvent中消费的，那么会把ACTION_MOVE或ACTION_UP传给该控件的onTouchEvent处理并结束传递
            图解images/ui/onTouchEventReturnTrue_ACTION_MOVE1.png
            红色的箭头代表ACTION_DOWN 事件的流向
            蓝色的箭头代表ACTION_MOVE 和 ACTION_UP 事件的流向

3.MotionEvent中的方法
  int x = event.getX();
  int y = event.getY();
  int rawX = event.getRawX();
  int rawY = event.getRawY();
  其中坐标(x,y)是以实现这个接口的view的左上角为坐标原点
  而坐标(rawX,rawY)是以屏幕的左上角为原点的坐标点

4.ScrollView嵌套ListView会产生什么问题,如何解决
    问题
        1.ListView显示不全(当ListView被ScrollView嵌套时，ListView使用的测量模式是ScrollView传入的MeasureSpec.UNSPECIFIED)
        2.ListView无法滑动
    解决
        1.自定义ListView重写onMeasure方法
            @Override
           protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
               int newHeightMeasureSpec = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE>>2, // 设计一个较大的值和AT_MOST模式
                       MeasureSpec.AT_MOST);
               super.onMeasure(widthMeasureSpec, newHeightMeasureSpec);//再调用原方法测量
           }
        2.自定义ListView重写dispatchTouchEvent方法,
          并在ACTION_DOWN事件中请求父容器不要拦截,调用getParent().requestDisallowInterceptTouchEvent(true);
          同时还是考虑滑动区域超过ListView时,把滑动权交给ScrollView
            @Override
            public boolean dispatchTouchEvent(MotionEvent ev) {
                int action = ev.getAction();
                switch (action) {
                    case MotionEvent.ACTION_DOWN:
                        super.onInterceptTouchEvent(ev);
                        //不允许上层viewGroup拦截事件.
                        getParent().requestDisallowInterceptTouchEvent(true);
                        break;
                    case MotionEvent.ACTION_MOVE:
                        //满足listView滑动到顶部，如果继续下滑，那就让scrollView拦截事件
                        if (getFirstVisiblePosition() == 0 && (ev.getY() - mLastY) > 0) {
                            //允许上层viewGroup拦截事件
                            getParent().requestDisallowInterceptTouchEvent(false);
                        }
                        //满足listView滑动到底部，如果继续上滑，那就让scrollView拦截事件
                        else if (getLastVisiblePosition() == getCount() - 1 && (ev.getY() - mLastY) < 0) {
                            //允许上层viewGroup拦截事件
                            getParent().requestDisallowInterceptTouchEvent(false);
                        } else {
                            //不允许上层viewGroup拦截事件
                            getParent().requestDisallowInterceptTouchEvent(true);
                        }
                        break;
                    case MotionEvent.ACTION_UP:
                        //不允许上层viewGroup拦截事件
                        getParent().requestDisallowInterceptTouchEvent(true);
                        break;
                }
                    mLastY = ev.getY();
                    return super.dispatchTouchEvent(ev);
            }
