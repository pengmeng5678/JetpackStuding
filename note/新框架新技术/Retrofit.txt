https://www.jianshu.com/p/7687365aa946
https://www.jianshu.com/p/a3e162261ab6
https://www.jianshu.com/p/0c055ad46b6c
https://www.jianshu.com/p/345304325511
本文主要记录Retrofit相关的知识点
一、概述
	1.Retrofit是Square公司开发的一个类型安全的Java和Android的REST客户端。无状态，没有session参与
	2.Retrofit模型：POJO或模型实体；接口(GET,POST)；RestAdapter类(RestClient类)
	
二、使用
	1.创建一个Retrofit对象
	Retrofit retrofit = new Retrofit.Builder()
			.addCoverterFactory(GsonConverterFactory.create())
			.baseUrl("http://www.wangyinews.com.cn/")
			.build();
			
	2.接口申明
	public interface NewsService{
		@GET("News/{newsId}")
		Call<News> getNews(@path("newsId"}) String newsId);
	}
	
	3.创建访问API的请求
	NewsService service = retrofit.create(NewsService.class);
	Call<News> call = service.getNews("123");
	
	4.调用
		方式一：同步调用
		News news = call.execute();
		方式二: 异步调用
		call.enqueue(new Callback<News>(){
			@overide
			public void onResponse(Response<News> response){
				News news = response.body();
			}
			@overide
			public void onFailaure(Throwable t){
			
			}
		});
	5.取消请求
	call.cancel();
	
三、结合Rxjava封装请求
	1.接口申明
	public interface NewsApi{
		@GET("News/{newsId}")
		Observable<News> getNews(@path("newsId"}) String newsId);
	}
	2.封装API
	private static Converter.Factory gsonConverterFactory = GsonConverterFactory.create();
    private static CallAdapter.Factory rxJavaCallAdapterFactory = RxJavaCallAdapterFactory.create();
	
	public static NewsApi getNewsApi(){
		OkHttpClient.Builder builder = new OkHttpClient().newBuilder();
        builder.readTimeout(10, TimeUnit.SECONDS);
        builder.connectTimeout(9, TimeUnit.SECONDS);
		
		Retrofit retrofit = new Retrofit.Builder()
			.baseUrl("http://www.wangyinews.com.cn/")
			.addCoverterFactory(gsonConverterFactory)
			.addCallAdapterFactory(rxJavaCallAdapterFactory)
			.build();
			
		NewsApi newsApi = Retrofit.create(NewsApi.class)
		return newsApi;
	}
			
	3.调用Api
	getNewsApi().getNews("123")
		.subscribeOn(Schedulers.io())
		.observeOn(AndroidSchedulers.mainThread())
		.subscribe(observer)
		
	这里observer由调用者处理业务逻辑，如
	Observer<List<Item>> observer = new Observer<List<Item>>() {
        @Override
        public void onCompleted() {
        }

        @Override
        public void onError(Throwable e) {
            swipeRefreshLayout.setRefreshing(false);
            Toast.makeText(getActivity(), R.string.loading_failed, Toast.LENGTH_SHORT).show();
        }

        @Override
        public void onNext(List<Item> images) {
            swipeRefreshLayout.setRefreshing(false);
            pageTv.setText(getString(R.string.page_with_number, page));
            adapter.setItems(images);
        }
    };
	
四、网络请求的service类型
GET请求：
	1.GET样式1：
	http://102.10.10.132/api/News
	@GET
	Call<NewsBean> getItem();
	
	2.GET样式2(URL中有参数)：
	http://102.10.10.132/api/News/1
	http://102.10.10.132/api/News/{资讯id}
	@GET
	Call<NewsBean> getItem(@path("newsId") String newsId)
	
	http://102.10.10.132/api/News/1/类型1
	http://102.10.10.132/api/News/{资讯id}/{类型}
	@GET
	Call<NewsBean> getItem(@Path("newsId") String newsId,@Path("type") String type); 
	
	3.样式3(参数在URL问号之后)
	http://102.10.10.132/api/News?newsId=1
	http://102.10.10.132/api/News?newsId={资讯id}
	@GET("News")
	Call<NewsBean> getItem(@Query("newsId") String newsId);
	
	http://102.10.10.132/api/News?newsId=1&type=类型1
	http://102.10.10.132/api/News?newsId={资讯id}&type={类型}
	@GET("News")
	Call<NewsBean> getItem(@Query("newsId") String newsId,@Query("type") String type);
	
	4.样式4(多个参数在URL问号之后，且个数不确定)
	http://102.10.10.132/api/News?newsId=1&type=类型1...
	http://102.10.10.132/api/News?newsId={资讯id}&type={类型}...
	@GET
	Call<NewsBean>getItem(
		@Query("newsId") String newsId,
		@QueryMap Map<String,String> map);
	或者：
	@GET
	Call<NewsBean>getItem(@QueryMap Map<String,String> map)
		
POST请求：
	5.样式1(需要补全URL,post的数据只有一天reason)
	http://102.10.10.132/api/Comments/1
	http://102.10.10.132/api/Comments/{newsId}
	@FormUrlEncoded
	@POST("Comments/{newsId}")
	Call<Comment> reportComment(
		@Path("newsId") String commentId,
		@Field("reason") String reason);
		
	6.样式2(需要补全URL,问号后加入access_token,post的数据只有一条reason)
	http://102.10.10.132/api/Comments/1?access_token=1234123
	http://102.10.10.132/api/Comments/{newsId}?access_token={access_token}
	@FormUrlEncoded
	@POST
	Call<Comment> reportComment(
		@Path("newsId")
		@Query("access_token" ))
		@Filed("reason") String reason);
		
	7.样式3(需要补全URL,问号后加入access_token,post一个body对象)
	@POST("Comment/{newsId}")
	Call<Comment> reportComment(
		@Path("newsId") String commentId,
		@Query("access_token") String access_token,
		@Body CommentBean bean)；
		
五.Retrofit	网络请求的service类型小结：
	1.@Path：所有再网址中的参数，URL问号前面
	2.@Query：URL问号后面的参数
	3.@QueryMap：相当于多个@Query
	4.@Field：用于POST请求，提交单个数据。使用Field时要记得添加 @FormUrlEncoded
	5.@Body：相当于多个@Field,以对象的形式提交
	
	
	
	
	
	
		