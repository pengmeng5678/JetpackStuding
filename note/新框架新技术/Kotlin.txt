本文主要记录Kotlin相关知识点
https://www.kotlincn.net/docs/reference/android-overview.html
https://juejin.im/post/591dd9f544d904006c9fbb96
https://blog.csdn.net/u013064109/article/details/78786646
第一章、Kotlin操作符
	?操作符
		表示这个对象可能为空
	?:操作符
		如果b非空，我使用它，否则使用某个非空的值x
		val l: Int = if(b != null) b.length else -1,或者用Elvis操作符
		val l = b?.length ?: -1
			如果?：左侧表达式为空，elvis操作符就返回其左侧表达式，否则返回右侧表达式，仅当左侧表示式为空时，才会对右侧表达式求值
	!!操作符
		val l = b!!.length	如果b不为空，返回一个非空的b值，如果b为空就会抛出一个NPE异常

	..符号 以及in 和 !in操作符
		..代表从x到y，包括x和y，这是一个闭区间运算符，until是半闭区间运算符，包含左边不包含右边
		in代表在一个区间中，!in代表不在一个区间中，可以使用某个数字是否在指定区间中 if(i in 1..10)

	downTo函数
		倒叙遍历，区间内循环，for(i in 4 downTo 1)

	step函数
		可以进行任意数量的迭代，而不是每次变化都是1
		for (i in 1..4 step 2) print(i)	//输出1和3

	::符号
		得到类的Class对象，startActivity(Intent(this@KotlinActivity, MainActivity::class.java))

	@符号
		1.限定this的类型
			class User {
				inner class State{
					fun getUser(): User{
						//返回User
						return this@User
					}
					fun getState(): State{
						//返回State
						return this@State
					}
				}
			}
		2.作为标签
			跳出双层for
				loop@ for (itemA in arrayA){
					var i : Int = 0
					for (itemB in arrayB){
						if(itemB > 2){
							break@loop
						}
					}
				}
			命名函数自动定义标签
			从forEach函数跳出

	as?操作符
		当使用as转型的时候，可能经常会出现ClassCastException，所以现在可以使as?安全转型，当转型不成功就返回null
		val m: Int? = a as? Int

	冒号:
		用于类的继承，变量的定义
		1.类型和超类型之间的冒号前要有一个空格
			class TestActivity<T : Serializable>(str: String) : Activity{}
		2.实例和类型之间的冒号前不要空格
			var str: String? = null

	类型判断符is
		检查某个实例是否是某个类型，如果判断出属于某个类型，那么判断后的分支中可以直接可当该类型使用，无需显示转换
		if (obj is String && obj.length >0)
			return obj.length
		return null

	多行输入符 三个双引号
		三引号之间输入的内容将被原样保留，之中的单号和双引号不用转义，不可见字符比如\n\t都会被保留
		val str = """
				one
				two
				  """
		等价于
		val str = "one\ntwo"
		val str = "one"+"\n"+"two"

	$操作符
		字符串可以保护模板表达式，及一小段代码，会求值并把结果包含到字符串中。模板字符串以$符号开头
		val str: String = "the value is $value"
		var userInfo = "name:${user.name},age:$age"
		val = str:String = "g+h=${g+h}"

		转义字符串和原生字符串都支持模板字符串，如果要在原生字符串中使用$，可以这样写
		val str:String = """the price is ${'$'}199"""

第二章、Kotlin基础
	数据类型
	    kotlin中，所有的类型都是对象，kotlin中没有了基础数据类型，全部为对象类型，如：
		Int,Boolean,String,Byte,Float,Char,Double,Short，不能直接强类型转换，需要用到toByte,toInt等方法
		Double、Long是64位，Float、Int是32位，Short16位，Byte8位
		123L、0x0f、123.5f,kotlin不支持8进制
		现在kotlin支持在数字常量中加下划线了，如，val phone:Long = 186_****_0814

    字符串
		==表示数据结构相等，即equels方法返回值，===用于判断两个对象是否指向同一个对象
		字符串中如果包含\n，可以这样："""hello world \n""" 这样\n就不会被转义为回车，而是原封原样的字符串了。
		字符串的模板特性：$可以直接取到变量的值，${}直接对字符串进行操作

	控制流：
		val array = 1..100
		for(value in array){
			print("value = $value")
		}

		步长控制,1..100控制区间是[1-100]
		for(i in 1..100 step 2){//倒序的话将step改为downTo
			print("i = $i")
		}
		when的功能和java中的switch功能类型，不过when可以判断类型

	集合
		Array表示数组，使用arrayof创建数组，array.indices可以获取索引
		List表示列表，用listOf创建，如listOf(1,2,3,"string")，用list.withIndex获取索引
		map表示集合，用mapOf创建，如val map = mapOf("a" to 1,"b" to 2,"c" to 3)

	空安全和变量
		如果被赋值对象，可以这样:var str:String ?= null,此时如果访问str.length会编译报错
		访问有两种方式:1.var siz = str?.length	2.执行前给变量赋值了，我们肯定它不为空，val size = str!!.length

		变量用var 常量用val表示，且类型放在变量后面，且类型有时可以省略
		var a = Int = 2和var a = 2这两个表达式是一样的

	函数
		有参数有返回值
			fun sum(a: Int, b: Int): Int {
				return a + b
			}
			// 等同于下面语句，简称函数式表达式
			fun sum(a:Int, b:Int) = a + b
			val sum = {x:Int ,y:Int -> x + y}

		没有返回值，可以把Unit理解为void
			fun printSum(a:Int,b:Int):Unit{	//此处的:Unit可以省略
				println("sum of $a and $b is ${a+b}")
			}
		默认参数 fun sum(a:Int,b:Int = 3):Int

        高阶函数与lambda表达式
            高阶函数：是将函数作为参数或返回值的函数
            lambda表达式
                lambda表达式，只支持单抽象方法模型，也就是说设计的接口里面只有一个抽象方法

            函数类型
                kotlin使用类似(Int) -> String的一系列函数类型来处理函数的声明val onClick:() ->Unit = ...
                这些类型具有与函数签名相对应的特殊表示法,即他们的参数与返回值；(A,B) -> C 表示接受类型分别是A与B两个参数并返回一个C类型值的函数类型
                挂起函数属于特殊种类的函数类型，它的表示法中有一个suspend修饰符

        内联函数
            使用高阶函数会带来一些运行时的效率损失:每个函数都是一个对象，并且会捕获一个闭包，即在那些函数体内会访问到的变量。内存分配和虚拟调用会引入运行时间开销
            但在许多情况下通过内联化lambda表达式可以消除这类的开销
            let
                let扩展函数实际上是一个作用域函数,当你需要去定义一个变量在特定作用域范围内，let函数时一个不错的选择；let函数另一个作用就是可以避免写一些非null的操作
                let函数底层的inline扩展函数+lambda结构
                       @kotlin.internal.InlineOnly
                    public inline fun <T, R> T.let(block: (T) -> R): R = block(this)
                    从源码let函数的结构来看它是只有一个lambda函数块block作为参数的函数,调用T类型对象的let函数，则该对象为函数的参数。
                    在函数块内可以通过 it 指代该对象。返回值为函数块的最后一行或指定return表达式
                let函数适用的场景
                    场景一: 最常用的场景就是使用let函数处理需要针对一个可null的对象统一做判空处理。
                    场景二: 然后就是需要去明确一个变量所处特定的作用域范围内可以使用，如
                        不使用let函数
                            mVideoPlayer?.setVideoView(activity.course_video_view)
                            mVideoPlayer?.setControllerView(activity.course_video_controller_view)
                            mVideoPlayer?.setCurtainView(activity.course_video_curtain_view)
                        //使用let函数
                            mVideoPlayer?.let {
                               it.setVideoView(activity.course_video_view)
                               it.setControllerView(activity.course_video_controller_view)
                               it.setCurtainView(activity.course_video_curtain_view)
                            }
            with
                with函数底层的inline扩展函数+lambda结构
                    @kotlin.internal.InlineOnly
                    public inline fun <T, R> with(receiver: T, block: T.() -> R): R = receiver.block()
                with函数不是以扩展的形式存在的，它是将某对象作为函数的参数,在函数块内可以通过this指代该对象，返回值为函数块的最后一行或指定return表达式
                可以看出with函数是接收了两个参数，分别为T类型的对象receiver和一个lambda函数块，所以with函数最原始样子如下:
                    val result = with(user, {
                        println("my name is $name, I am $age years old, my phone number is $phoneNum")
                        1000
                    })
                但是由于with函数最后一个参数是一个函数，可以把函数提到圆括号的外部，所以最终with函数的调用形式如下:
                    val result = with(user) {
                        println("my name is $name, I am $age years old, my phone number is $phoneNum")
                        1000
                    }
                with函数的kotlin表示法
                    val user = User("Kotlin", 1, "1111111")
                    val result = with(user) {
                        println("my name is $name, I am $age years old, my phone number is $phoneNum")
                        1000
                    }
                    println("result: $result")
                with函数的Java表示法
                      User user = new User("Kotlin", 1, "1111111");
                      String var4 = "my name is " + user.getName() + ", I am " + user.getAge() + " years old, my phone number is " + user.getPhoneNum();
                      System.out.println(var4);
                      int result = 1000;
                      String var3 = "result: " + result;
                      System.out.println(var3);
                with函数的使用场景
                      适用于调用同一个类的多个方法时，可以省去类名重复，直接调用类的方法即可，
                      经常用于Android中RecyclerView中onBinderViewHolder中，数据model的属性映射到UI上

            run
                run函数的inline+lambda结构
                    @kotlin.internal.InlineOnly
                    public inline fun <T, R> T.run(block: T.() -> R): R = block()
                    run函数实际上可以说是let和with两个函数的结合体，run函数只接收一个lambda函数为参数，以闭包形式返回，返回值为最后一行的值或者指定的return的表达式
                run函数的使用场景
                    适用于let,with函数任何场景。因为run函数是let,with两个函数结合体，
                    准确来说它弥补了let函数在函数体内必须使用it参数替代对象，在run函数中可以像with函数一样可以省略，直接访问实例的公有属性和方法，
                    另一方面它弥补了with函数传入对象判空问题，在run函数中可以像let函数一样做判空处理
            apply
                apply函数底层的inline扩展函数+lambda结构
                    @kotlin.internal.InlineOnly
                    public inline fun <T> T.apply(block: T.() -> Unit): T { block(); return this }
                    从结构上来看apply函数和run函数很像，唯一不同点就是它们各自返回的值不一样，run函数是以闭包形式返回最后一行代码的值，而apply函数的返回的是传入对象的本身
                apply适用场景
                    apply一般用于一个对象实例初始化的时候，需要对对象中的属性进行赋值。或者动态inflate出一个XML的View的时候需要给View绑定数据也会用到
            also
                also函数底层的inline扩展函数+lambda结构
                    @kotlin.internal.InlineOnly
                    also函数的结构实际上和let很像唯一的区别就是返回值的不一样，let是以闭包的形式返回，返回函数体内最后一行的值，如果最后一行为空就返回一个Unit类型的默认值。
                    而also函数返回的则是传入对象的本身
            let,with,run,apply,also函数的区别
                let:it指代对象,返回函数最后一行或者return表达式结果
                with:this指代对象，返回函数最后一行或者return表达式结果
                run:this指代对象,返回函数最后一行或者return表达式结果，结合了let和with的优点
                apply:this指代对象,返回this对象本身;和run唯一不同就是返回值不同
                also:it指代对象,返回this对象本身；和let唯一不同就是返回值不同

    延迟属性
        延迟属性或者延初始化可以帮助我们在需要的时候再进行初始化，不需要时不初始化，帮助程序节省内存空间和启动速度
        kotlin中使用lazy关键字来表示
        val answer by lazy{
            print("calculating the answer")
        }

        if(needAnswer()){
            这里只有执行到needAnswer为true时才会初始化answer
            print("the answer is $answer")
        }else{
            print("sometimes no answer is the answer")
        }
        注意，by lazy所赋值的变量必须为val类型

第三章、Kotlin类
    1.类的声明
        类声明由类名、类头和类体构成，其中类头和类体都是可选的，如果一个类没有类体，那么花括号也是可以省略的
        类使用class关键字来标识，但是kotlin中的类都是不可继承的，也就是final类型，
        如果需要被继承，就必须把这个类标记为open或者abstract类型

    2.可见性声明
        kotlin一共有四种可见性修饰符，private,protected,internal,public
        internal修饰符时模块级别的访问权限，模块(module)我们称被一起编译的一系列Kotlin文件为一个模块
        可见性修饰符可以用于函数、属性、类、对象和接口，但是不能修饰局部变量
        如果没有显式指定修饰符的话，默认可见性是public，和java不同，java是默认的包级别访问权限，每一修饰符

    3.类属性
        getter/setter和field关键字
            kotlin中，对于var的变量都会默认有setter和getter方法，对val的仅有getter方法，当然也可复写这两个方法

            新手写法，这样会造成stackOverflowError错误
            public final class Person{
                public final int getAge(){
                    return this.getAge()
                }

                public final void setAge(int value){
                    this.setAge(value)
                }
            }

            正确写法
            class Person{
                var age:Int = 0
                get() = field
                set(value){
                    field  = value
                }
            }
            注意：filed标识符只能用在属性的访问器getter和setter内

        lateinit关键字
            由于kotlin默认是不允许为空的额，所以在声明变量时，必须对其赋值，但是有时我们无法在定义的时候就赋值
            这时，我们可以使用lateinit关键字进行标记
            lateinit var ageStr:String

            注意
                1.lateinit只能用于var类型的变量
                2.lateinit不能用于基础类型，因为基础类型没有null的情况

        构造
            kotlin中的类需要构造函数时，可以有一个注构造函数和多个次构造函数，当然也可以没有构造函数
            Kotlin的构造函数可以写类头中，跟在类名后面
            主构造函数
                class Person(name:String){}

                当构造函数有注解或者可见性修饰符时，构造函数需要加constructor关键字
                class Person private constractor(name:Strings)  //private指的是构造方法为private类型

                由于主构造函数中是不能有代码块的，如果想要在主构造函数中写代码块，则必须使用init{}语句块
                class Person(name:String){
                    private var mName:String
                    init{
                        println("init")
                        mName = name.toUpperCase()
                    }
                }

                当在构造函数中的参数名前加上var,val则表示此参数为类的一个成员变量，并且会自动在构造函数
                中对其进行赋值，默认也会为其生成get和set方法。若不想对外访问则添加private修饰符既可
                class TestClass(val name:String){
                    fun test(){
                        ...
                    }
                }
                //这里加上private修饰后，外部就不可以访问name属性了
                class TestClass(private var name:String){
                    fun test(){
                        ...
                    }
                }

            二级构造
                一个类中如果有多个构造函数，只有主构造函数可以写在类头中，其他的次级构造函数需要写在类体中
                二级构造函数也称为次级构造函数：
                    1.次级构造函数不能省略constructor关键字
                    2.当类拥有主构造函数时，任何一个二级构造函数都需要直接或间接通过另一个二级构造函数代理主构造函数
                    3.类中的一个构造函数代理另一个构造函数，需要使用关键字this

                class Person constructor(id:Int){//主构造函数NO.0
                    var id = id//主构造函数初始化id
                    var name = ""
                    var age = 0
                    //构造函数No.1直接代理主构造函数
                    constructor(name:String,id:Int):this(id){
                        this.name = name
                    }
                    //构造函数No.2代理了构造函数No.1，间接代理主构造函数
                    constructor(name:String,age:Int,id:Int):this(name,id){
                        this.age = age
                    }
                }

                这类补充子类的次构造函数时无法直接代理到父类的方法，必须指向本类的主或次构造函数，但最终都会指向主构造函数
     4.枚举类

第四章 类的继承、接口、复写、data数据类、单例、Object属性
    1.继承
        Kotlin的继承方式与java类似，java中所有对象都继承自Object ,而Kotlin中所有对象均继承自Any。两者均不能多继承
        只是表现形式不同，Kotlin继承使用冒号:,想要复写某个方法，则也需要将方法标记为open的才可以被复写

        切记一个类想要被继承，必须使用open或者abstract关键字声明
        open class Person(name:String)
        class male(name:String):Person(name)

    2.抽象类
        抽象类与java是一致的，通过abstract关键字标记为抽象类，抽象类中抽象方法也用abstract标记
        有了abstract标记后就不需要使用open进行标注了
        open class Person{
            open fun eat(){}
        }

        abstact class oldPerson():Person(){
            override abstract fun sleep()
        }
        抽象类和抽象方法是默认open关键字修饰的
        复写抽象类中实现的方法，也必须要加open关键字才可以复写
        抽象类有抽象方法和方法的实现，可以有成员属性

    3.接口
        Kotlin中的接口需要使用关键字interface进行声明，Kotlin的接口即包含抽象方法的声明，也可以包含实现
        且接口中也可以声明属性，默认属性要求是抽象的，或者是提供访问器，其接口中的属性不能有field属性关键字
        示例：
            interface MyInterface{
                val prop:Int //抽象的
                val propertyWithImplementation:String get() = "foo"
                fun foo(){
                    print(prop)
                }
            }

            class Child : MyInterface{
                override val prop:Int = 29
            }
            接口中已经实现的方法，在子类中进行复写不需要在加open关键字

    4.复写
        复写的关键字为override,与java的区别是没有了@符号了，复写需要注意两点
            1.var 可以复写val类型的，反之则不行
            2.想要复写父类的方法，父类方法必须加open关键字标识

        复写规则中，如果继承和实现了同样的方法名，则必须在子类对该方法进行复写，
        不然编译器不知道该调用哪个父类的方法
        示例：
            open class A{
                open fun f()    {print("A")}
                fun a() {print("a")}
            }

            interface B{
                fun f() {print("B")} //接口默认就是open的
                fun b() {print("b")}
            }

            class C():A(),B{
                override fun f(){
                    super(A).f() //调用A.f()
                    super(B).f() //调用B.f()
                }
            }

    5.data数据类
        在与服务器交互中经常有数据类，在Kotlin中直接使用data标记为数据类，
        它会根据构造函数的属性生成equals,hashcode,toString方法，当然这块我们也是可以重写的
        需要注意的是：
            1.数据类主构造函数至少有一个参数
            2.主构造函数的所有参数需要标记为val或var

    6.单例声明
        在java中写一个单例是很麻烦的事情，也有很多种不同的写法，需要考虑多线程问题，但在Kotlin中
        单例就简单的多，使用object关键字就可以实现单例
        object Person{//饿汉式
            fun eat(){
                print("eat")
            }
        }
        companion object{
            @Volatile private var instance:AppDatabase ?= null
            fun getInstance(context: Context):AppDatabase{
                return instance ?: synchronized(this){
                    instance ?: buildDatabase(context).also{ instance = it}
                }
            }
            ...
        }

    7.对象表达式
        当需要修改一个类的部分功能，可以不通过显示实现一个该类的子类方式来实现，在java中，通过匿名内部类
        来实现;在kotlin中，概括为对象表达式和对象声明。最常见的就是我们代码中设置listener，示例如下
            val test = object : View.OnclickListener(){
                overide fun onClick(p0:View?){
                    ...
                }
            }

        还有这种用法
            val adHoc = object{
                var x:Int = 0
                var y:Int = 0
            }
            print(adHoc.x + adHoc.y)

    8.伴生对象
        Kotlin中没有静态的属性和方法的概念，Kotlin官网建议我们使用包级别的函数，来替代静态方法
        当前也可以在类中使用companion object关键字声明一个伴生对象，如下

            class Test{
                companion object{
                    val TAG = "TEST"
                }
                fun test(){
                    Log.v(Test.TAG,"test method")
                }
            }
    9.类的扩展
        在java开发的时候，会经常写一大堆的工具类，Kotlin中的类扩展方法就是这个作用
        fun Activity.toast(message:CharSequence,duration:Int = Toast.LENGTH_SHORT){
            Toast.makeText(this,message,duration).show()
        }

        注意：

第五章 kotlin与java混编
    5.1.直接转换
        5.1.1 将java转换为Kotlin
            通过Intellij IDEA可以一键转换，将java转换为Kotlin代码(但是反过来就不行了)，convert java File to Kotlin File
        5.1.2 注意Class调用
            在Java或者Android开发中，经常会直接调用一个类的Class文件，但是当用5.1.1的方式转换xxx.class这样的代码时，
            是无法直接转换的，需要人手动更改
        5.1.3 Android proguard的坑
            var str = some?.s?.d?:""    这行代码编译时完全正常，但是一旦执行混淆时，就会发现所在函数被移除的现象
            var str = some?.s?.d?:String() 这行代码混淆后就不会出现问题

    5.2 在Kotlin中调用java代码
        5.2.1返回Void的方法
            如果一个java方法返回void，对应的在Kotlin代码中它将返回Unit。在Kotlin中可以省略这个Unit返回
        5.2.2 与Kotlin关键字冲突的处理
            java有static关键字，而Kotlin中没有，你需要使用@JvmStatic替代这个关键字
            同样，在Kotlin中也有很多这样的关键字java中是没有的，例如in is data 等，
            如果java中使用了这些关键字，需要加上反引号转义来避免冲突
                例如java中有个方法叫is() 转换为Kotlin代码需要加反引号转义 fun 'is'(){}

    5.3 在Java中调用Kotlin代码
        5.3.1 static方法
            在java中想要通过类名调用一个Kotlin的方法，你需要给这个方法加入@JvmStatic注解
            Object StringUtils{
                @JvmStatic fun isEmpty(str: String): Boolean{
                    return "" == str
                }
            }
        5.3.2 包级别函数
        与Java不同，Kotlin允许函数独立存在，而不必依赖于某个类，这个函数我们称之为包级别函数
        为了兼容java,Kotlin默认会将所有的包级别函数放在一个自动生成的叫ExampleKt的类中，在Java
        中想要调用包级别函数，需要通过这个类来调用。当然也可以自定义的，你只需要通过注解@file:JvmName("Example")
        即可将当期文件中的所有包级别函数放到一个自动生成的名为Example的类中

        5.3.3空安全性
        在Java中，如果你调用的Kotlin方法参数声明了非空类型，如果你在java代码中传入一个空值，将在运行时抛出
        NullPointerException

第六章 koltin内联扩展函数































