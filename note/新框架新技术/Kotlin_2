1.Android原生项目转换成Kotlin项目常见错误
    1.AndroidStudio安装kotlin插件,project和app的gradle中配置kotlin依赖和版本
        buildscript {
            ext.kotlin_version = '1.3.0'
            dependencies {
                classpath 'com.android.tools.build:gradle:3.2.1'
                classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
            }
        }
    2.Program type already present: kotlin.Deprecated
        可能项目中引用了其他aar包也使用了Kotlin，所以在gradle中将自己kotlin的引用改为
        compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    3.启动app马上报错,classNotFoundException
        在gradle中添加两个依赖
            apply plugin: 'kotlin-android-extensions'
            apply plugin:'kotlin-android'
    4.带参数的接口回调
        setOnXXXListener(object:XXX{
            //override method
        })
    5.引用MyApplication中的静态常量报NullpointException
        Kotlin类不支持静态方法和成员，但Kotlin支持全局函数和变量,陪伴对象（Companion Objects）就是Kotlin用来解决这个问题的语法糖
    6.Parameter specified as non-null is null: method kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull
        自定义Dialog时,调用dialog.show方法时,提示Dialog的onCreate方法报错
        解决方案:将Dialog方法的onCreate方法参数后面加个问号？表示，该参数可以为空

    7.Assignments are not expressions, and only expressions are allowed in this context
        修改前
            while ((len = `is`.read(buffer)) != -1) {
                 os.write(buffer, 0, len)
            }
        修改后
            while (`is`.read(buffer).let { len = it;it != -1}){
                os.write(buffer, 0, len)
            }
    8.One type argument expected. Use 'Holder<*>' if you don't want
       修改前
        class PlayListAdapter<T>(private val context: Context, private val mPlaylistData: List<T>
       修改后
        class PlayListAdapter(private val context: Context, private val mPlaylistData: List<Any>
		
	9.Fragment中直接通过布局id引用报空指针
        在onCreateView方法未执行完成就直接引用布局id就会报这种错误