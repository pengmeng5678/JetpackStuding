1.Android原生项目转换成Kotlin项目常见错误
    1.AndroidStudio安装kotlin插件,project和app的gradle中配置kotlin依赖和版本
        buildscript {
            ext.kotlin_version = '1.3.0'
            dependencies {
                classpath 'com.android.tools.build:gradle:3.2.1'
                classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
            }
        }
    2.Program type already present: kotlin.Deprecated
        可能项目中引用了其他aar包也使用了Kotlin，所以在gradle中将自己kotlin的引用改为
        compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    3.启动app马上报错,classNotFoundException
        在gradle中添加两个依赖
            apply plugin: 'kotlin-android-extensions'
            apply plugin:'kotlin-android'
    4.带参数的接口回调
        setOnXXXListener(object:XXX{
            //override method
        })
    5.引用MyApplication中的静态常量报NullpointException
        Kotlin类不支持静态方法和成员，但Kotlin支持全局函数和变量,陪伴对象（Companion Objects）就是Kotlin用来解决这个问题的语法糖
    6.Parameter specified as non-null is null: method kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull
        自定义Dialog时,调用dialog.show方法时,提示Dialog的onCreate方法报错
        解决方案:将Dialog方法的onCreate方法参数后面加个问号？表示，该参数可以为空

    7.Assignments are not expressions, and only expressions are allowed in this context
        修改前
            while ((len = `is`.read(buffer)) != -1) {
                 os.write(buffer, 0, len)
            }
        修改后
            while (`is`.read(buffer).let { len = it;it != -1}){
                os.write(buffer, 0, len)
            }
    8.One type argument expected. Use 'Holder<*>' if you don't want
       修改前
        class PlayListAdapter<T>(private val context: Context, private val mPlaylistData: List<T>
       修改后
        class PlayListAdapter(private val context: Context, private val mPlaylistData: List<Any>
		
	9.Fragment中直接通过布局id引用报空指针
        在onCreateView方法未执行完成就直接引用布局id就会报这种错误

2.Kotlin常见问答
    1.Kotlin相对于Java有哪些优缺点
    https://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650829355&idx=1&sn=3a7087d2cfa9087107aad8d8b369ce0d&chksm=80b7a6b5b7c02fa3b0025fb600644456f267e619b7b15d5814ff93eead4f0fdf2811e0b39a05&mpshare=1&scene=1&srcid=0219hCjNYsx4XRMrgksz8Gds&sharer_sharetime=1582097543018&sharer_shareid=b91a3062fa43e169a7da0f016e38637e&exportkey=AcWCcmIxsakJOY3Hyqk15Mw%3D&pass_ticket=MBdOe6nebVJnejquEfwTIDeyuvFoOZsO57r8C65JtPzhIwyEmp7fsoBgRZ3uK5Su#rd
        字符模板:
        空安全:
        延迟加载:等到要使用到变量的时候才去加载,而不是类加载的时候就加载
            val userInfo:UserInfo by lazy{UserInfo()}
            lateinit var person:InvationPerson
        when表达式:
        默认参数:
        方便易读的循环:
        强大的迭代器:
        Datacalss
        标准函数库：let,with,run,apply,also
        协程
    2.Kotlin实现空安全的原理是什么
        AndroidStudio-Tool-kotlin-Show Kotlin Bytecode,通过这个工具可以显示kotlin编译后的字节码，通过左上角的Decompile可以反编译字节码查看java代码形式
        通过查看代码，kotlin实现空安全原理如下
            1. 非空类型的属性编译器编译时会添加@NotNull注解,可空类型添加@Nullable注解
            2、非空类型直接对参数进行判空，如果为空直接抛出异常；
            3、可空类型，如果是?.判空，不空才执行后续代码，否则返回null；如果是!!，空的话直接抛出NPE异常。
            4、as操作符会判空，空的话直接抛出异常，不为空才执行后续操作，没做类型判断！运行时可能会报错！
            5、as?则是新建一个变量，参数赋值给它，然后判断是否为特定类型，赋值为null，接着把这个变量的值赋值给另一个新的变量，这里有一点注意：as?处理后的参数可能为空！！！所以调用as?转换后的对象还需要添加安全调用操作符(?.)
    3.协程
        扔物线
        https://blog.csdn.net/c10WTiybQ1Ye3/article/details/94415256

        1.介绍
            协程是一个线程框架,它好在方便,它能在同一个代码块里面进行多次的线程切换(怎么切换呢,通过withContext)
            以下代码中launch函数中的两行代码就是一个协程
            launch(Dispatchers.Main){
                val image = suspendingGetImage(iamgeId)
                avatarIv.setImage(image)
            }
            //suspend修饰的函数称为挂起函数
            suspend fun suspendingGetImage(imageId:String){
                //怎么指定协程中执行任务的线程呢? 使用withContext指定
                withContext(Dispatchers.IO){
                    getImage(imageId)
                }
            }
            挂起函数：
                1.从suspendingGetImage这行代码开始,我们不再执行这个协程了,而是兵分两路,分别执行当前线程逻辑和执行协程里面的逻辑
                    1.线程继续剩下的代码
                    2.挂起函数在指定线程执行新的业务逻辑,且挂起函数执行完毕之后

        2.和线程的区别

        3.项目中哪里用到了协程
