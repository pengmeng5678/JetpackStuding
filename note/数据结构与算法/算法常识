时间和空间复杂度 https://www.cnblogs.com/wt869054461/p/9764834.html
1.时间复杂度
    时间复杂度的计算并不是计算程序具体代码行数，而是算法执行语句的次数
    常用时间复杂度有
        常数阶O(1)
        对数阶O(log2 n)
        线性阶O(n)
        线性对数阶O(n log2 n),
        平方阶O(n^2)，
        立方阶O(n^3)
        k次方阶O(n^K),
        指数阶O(2^n)
        随着n的增大，时间复杂度不断增大,算法花费时间越多
    计算方法
        1.选取相对增长最高的项
        2.最高项系数都化为1
        3.若是常数的话用O(1)表示
        如f(n)=2*n^3+2n+1+100,则O(n) = n^3
    时间复杂度的计算
        1、如果算法的执行时间不随问题规模n的增加而增长,即使算法有千万条语句，执行长度也是一个常数，此类算法时间复杂度为O(1)
        2、当有若干个循环语句时，算法的时间复杂度由嵌套层数最多的循环语句中最内层语句的频度f(n)决定
          如双重for循环的时间复杂度是O(n^2)
2.空间复杂度
    空间复杂度是对一个算法在运行过程中临时占用存储空间大小的量度
