https://www.jianshu.com/p/30a2bfb202b4
https://cloud.tencent.com/developer/article/1428642
1.什么是SparseArray
    是一种用Integer作为键映射对象的数组,一般数据在几百以内时,性能比HashMap要好,能提高50%以下的性能

    SparseArray<E> 相当于 Map<Integer,E> ，key 值固定为 int 类型，在初始化时只需要声明 Value 的数据类型即可，
    其内部用两个数组分别来存储 Key 列表和 Value 列表：int[] mKeys ; Object[] mValues
    mKeys 和 mValues 通过如下方式对应起来：
        假设要向 SparseArray存入key为10，value为200的键值对则先将10存到mKeys中，假设10在mKeys中对应的索引值是index ，则将value存入mValues[index] 中
        最首要的一点就是 SparseArray 避免了 Map 每次存取值时的装箱拆箱操作，其 Key 值类型都是基本数据类型 int，这有利于提升性能

2.SparseArray采用什么数据结构
    HashMap采用一维数组+链表的数据结构；
    SparseArray采用两个一维数组的数据结构分别存储Key和Value数据,且Key对应的数据类型只能是int类型
3.SparseArray默认容量
    10
4.SparseArray最大容量,每次扩容多少
    最大容量时Integer.MAX_VALUE,每次扩容时如果当前容量小于5则扩容是8,否则扩容为原容量的2倍
5.SparseArray get原理
    通过二分查找算法找到key对应的下标,如果没找到value就返回null，如果找到了就返回value值
    因为查找时需要进行一次二分查找,所以当数据量大的时候(如超过1千)相对于HashMap来说,SparseArray查找效率较低
6.SparseArray的put原理
    put方法中用到了ContainerHelpers提供的二分查找方法binarySearch,用于查找目标key在mKeys中的当前索引或者是目标索引
    binarySearch方法的返回值分为两种情况
        1.如果mKeys中存在对应的key,则直接返回对应的索引值
        2.如果mKeys中不存在对应的key
            假设mKeys中存在"值比key大,且大小与key最接近的值的索引"为presentIndex,则方法的返回值为~presentIndex
            如果方法中不存在比key还要大的值的话,则返回值为~mKeys.length

    可以看到,即使mKeys中不存在目标key,但其返回值也指向了让key存入的位置,不过对这个索引值进行了取反操作,
    这样binarySearch返回值一定是0或者负数,从而与找到目标key的情况区分开来
    且通过这种方式来存放数据,可以使得mKeys的内部是按照递增的方式来排序的

7.SparseArray查找采用的什么算法
    二分查找
8.SparseArray与HashMap的区别
                SparseArray         HashMap
    算法          二分查找            hash
    数据结构       两个一维数组       数组+链表
    是否有序       升序存储             无序
    默认容量        10                  16

9.SparseArray优缺点
     优点
        1.性能更高。避免了基本数据类型的装箱和拆箱工作
        2.占用空间更小。避免了HashMap的Node节点对象封装,SparseArray不需要用Node包装,存储成本更低廉
        3.查找速度快。数据量小(几百)的时候,采用二分查找效率更高
     缺点
        1.插入速度慢。插入新元素会导致大量数组元素移动
        2.数据量大时,会导致查找速度慢

get源码如下
    public E get(int key) {
            return get(key, null);
    }

    public E get(int key, E valueIfKeyNotFound) {
            //通过二分法找在mkeys数组中找到匹配的key的下标
            int i = ContainerHelpers.binarySearch(mKeys, mSize, key);

            if (i < 0 || mValues[i] == DELETED) {
                //如果没找到对应的值，则返回默认值null
                return valueIfKeyNotFound;
            } else {
                //返回找到匹配的值
                return (E) mValues[i];
            }
    }

添加数据如下
        //将索引 index 处的元素赋值为 value
        //SparseArray 的元素值都是存到 mValues 中的，因此如果知道目标位置（index），则可以直接向数组 mValues 赋值
        public void setValueAt(int index, E value) {
            //如果需要则先进行垃圾回收
            if (mGarbage) {
                gc();
            }
            mValues[index] = value;
        }

        /**
         * Adds a mapping from the specified key to the specified value,
         * replacing the previous mapping from the specified key if there
         * was one.
         */
        public void put(int key, E value) {
            //用二分查找法查找指定 key 在 mKeys 中的索引值
            int i = ContainerHelpers.binarySearch(mKeys, mSize, key);
            //找得到则直接赋值
            if (i >= 0) {
                mValues[i] = value;
            } else {
                //binarySearch 方法的返回值分为两种情况：
                //1、如果存在对应的 key，则直接返回对应的索引值
                //2、如果不存在对应的 key
                //  2.1、假设 mKeys 中存在"值比 key 大且大小与 key 最接近的值的索引"为 presentIndex，则此方法的返回值为 ~presentIndex
                //  2.2、如果 mKeys 中不存在比 key 还要大的值的话，则返回值为 ~mKeys.length

                //可以看到，即使在 mKeys 中不存在目标 key，但其返回值也指向了应该让 key 存入的位置
                //通过将计算出的索引值进行 ~ 运算，则返回值一定是 0 或者负数，从而与“找得到目标key的情况（返回值大于0）”的情况区分开
                //且通过这种方式来存放数据，可以使得 mKeys 的内部值一直是按照值递增的方式来排序的

                i = ~i;

                //如果目标位置还未赋值，则直接存入数据即可，对应的情况是 2.1
                if (i < mSize && mValues[i] == DELETED) {
                    mKeys[i] = key;
                    mValues[i] = value;
                    return;
                }

                //以下操作对应两种情况：
                //1、对应 2.1 的一种特殊情况，即目标位置已用于存放其他值了
                //   此时就需要将从索引 i 开始的所有数据向后移动一位，并将 key 存到 mKeys[i]
                //2、对应的情况是 2.2

                if (mGarbage && mSize >= mKeys.length) {
                    gc();
                    //GC 后再次进行查找，因为值可能已经发生变化了
                    i = ~ContainerHelpers.binarySearch(mKeys, mSize, key);
                }
                //通过复制或者扩容数组，将数据存放到数组中
                mKeys = GrowingArrayUtils.insert(mKeys, mSize, i, key);
                mValues = GrowingArrayUtils.insert(mValues, mSize, i, value);
                mSize++;
            }
        }
        //GrowingArrayUtils.java
        public static <T> T[] insert(T[] array, int currentSize, int index, T element) {
            assert currentSize <= array.length;

            if (currentSize + 1 <= array.length) {
                //如果当前数组容量充足，先将当前下标index往后移动
                System.arraycopy(array, index, array, index + 1, currentSize - index);
                //在将要添加的元素放到下标为index的地方
                array[index] = element;
                return array;
            }

            //如果容量不足，先进行扩容生成新的数组newArray
            @SuppressWarnings("unchecked")
            T[] newArray = ArrayUtils.newUnpaddedArray((Class<T>)array.getClass().getComponentType(),
                    growSize(currentSize));
            //将原数组中index个元素拷贝到新数组中
            System.arraycopy(array, 0, newArray, 0, index);
            //将要添加的元素添加到index位置
            newArray[index] = element;
            //将原数组中index+1之后的元素拷贝到新数组中
            System.arraycopy(array, index, newArray, index + 1, array.length - index);
            return newArray;
        }

        //和 put 方法类似
        //但在存入数据前先对数据大小进行了判断，有利于减少对 mKeys 进行二分查找的次数
        //所以在“存入的 key 比现有的 mKeys 值都大”的情况下会比 put 方法性能高
        public void append(int key, E value) {
            if (mSize != 0 && key <= mKeys[mSize - 1]) {
                put(key, value);
                return;
            }
            if (mGarbage && mSize >= mKeys.length) {
                gc();
            }
            mKeys = GrowingArrayUtils.append(mKeys, mSize, key);
            mValues = GrowingArrayUtils.append(mValues, mSize, value);
            mSize++;
        }
