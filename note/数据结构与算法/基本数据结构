1.Collection接口下有List和Set集合，以下是list和Set集合的特点
    List:可以存储重复数据,存取有序
        ArrayList:底层采用数组实现，增删慢，查询快
        LinkedList:底层采用链表实现，增删快，查询慢
        Vector：线程安全
    Set:不可以存储重复数据，存取无序
        HashSet:
        LinkedHashSet
        TreeSet:不可以存储重复,存取有序,增删数据都要重新排序，效率低

2.Map接口：key唯一
    HashMap:存取无序，可以存储重复数据,key和value都可以存null值
    hashTable:线程安全
    LinkedHashMap:存取有序,可以存储重复数据
    TreeMap:存取有序,不可以存储重复数据,插入和删除都会重新排序，效率低

3.HashMap实现原理
    HashMap默认采用数组+链表的形式存放数据，存取无序，Key必须唯一，可以存储重复的Value值,key和value都可以存储一个Null值
    put数据时可以分为5个步骤
    1.数组默认长度为16,当存放数据长度大于12时，默认加载因子是0.75,采用2的整数倍进行扩容
    2.当存放的数据时Null值时，存放到数组的table[0]的位置
    3.put数据时,先通过Key计算hashCode值,然后根据这个hashCode获取存放数组的索引
    4.遍历数组是否存在相同的key，并且hashCode值也相同，那么新的value值会替换就的value值，并返回一个旧的value
    5.如果计算得到的hashCode值不相同，就直接存放到当前数组，如果hash值相同,那么就存放到当前索引对应的链表中
        java8,规定当链表的节点数量超过8会将链表转换成红黑树，节点数量小于6时自动转换成链表

    问题2：HashMap为什么是线程不安全的
        因为Hash碰撞和扩容的原因
        1.hash碰撞时，通过拉链法解决碰撞冲突，通过Entry内部的next变量我们知道使用的是链表。
            当多个线程put数据，有两个或以上的key发生hash碰撞时，获取到了同一个链表的结点,那么addEntry必然会发生数据丢失
        2.hashMap扩容时会调用非同步的resize方法，扩容时会生成一个新容量的数组，
            然后对原数组的键值对重新进行计算并写入到新的数组中，之后指向新的数据。
            当多个线程同时put数据时，某个时刻发生扩容resize，那么最终只有一个线程生成的新数组赋值给了table变量，其他线程的数据都会丢失。
4.TreeSet实现原理
    特点：底层由TreeMap实现(TreeMap底层由红黑树实现)，实现了Set接口，不允许存储重复元素，存取按自然顺序排序
          只允许存储同一种数据类型，不允许存储null类型
    问题1：TreeSet是如何实现存取有序的呢？
    问题2：TreeSet是如何保证元素不重复的呢？有自然排序和构造器排序两种方式
        1.自然排序，根据元素的自然顺序元素进行排序，自然排序需要元素实现Comparable接口，在重写的compareTo方法中定义比较规则
            compareTo方法：返回-1表示放在红黑树的左边，即逆序输出，这里保证元素不重复
                           返回1表示放在红黑树的右边，即顺序输出，这里保证元素不重复
                           返回0表示元素相同，仅存放第一个元素，这里保证元素不重复
        2.比较器排序
          在创建TreeSet实例的时候，在TreeSet的构造方法中传入Comparator实例，在重写的compare方法中定义比较规则

5.HashSet实现原理
    特点：底层由hashMap实现，存取不保证有序，不能存储相同元素
        问题1:HashSet是如何实现添加元素保证不重复的呢？
            结论：根据元素的hashCode和equals方法判断
            1.add数据元素时，如果元素的hash码值不相同，说明不是一个元素，存
            2.add数据元素时，如果元素的hash码值相同，且equals方法判断相等，认定为同一个元素，不存

            注：String和Integer等包装类默认实现了hashCode和equals方法，所以会自动去重
            自定义对象时，如果不重写hashCode和equals方法，那么对象默认的hashCode都是不一样的，都会被认定不是同一个元素