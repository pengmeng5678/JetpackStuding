Handler.java
    public Handler(Callback callback,boolean async){
        mLooper = Looper.mylooper();
        if(mLooper == null){
            throw new RuntimeException("can’t create handler inside thread that has not called Looper.prepare()")
            mQueue = Looper.mQueue;
            mCallback = callback;
            mAsynchrous = async
        }
    }
    public void dispatchMessage(Message msg) {
        if (msg.callback != null) {
            handleCallback(msg);//执行message.callback.run();
        } else {
            if (mCallback != null) {
                if (mCallback.handleMessage(msg)) {
                    return;
                }
            }
            //回调用户重写的方法
            handleMessage(msg);
        }
    }
    //sendMessage后最终会调用到enqueueMessage这个方法将消息存放到MessageQueue中
    private boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) {
        msg.target = this;
        if (mAsynchronous) {
            msg.setAsynchronous(true);
        }
        return queue.enqueueMessage(msg, uptimeMillis);
    }
Looper.java
    public static @Nullable Looper myLooper() {
        return sThreadLocal.get();
    }
    private static void prepare(boolean quitAllowed) {
        if (sThreadLocal.get() != null) {
            throw new RuntimeException("Only one Looper may be created per thread");
        }
        sThreadLocal.set(new Looper(quitAllowed));
    }
    private Looper(boolean quitAllowed) {
        mQueue = new MessageQueue(quitAllowed);
        mThread = Thread.currentThread();
    }
    public static void loop() {
        final Looper me = myLooper();
        if (me == null) {
            throw new RuntimeException("No Looper; Looper.prepare() wasn't called on this thread.");
        }
        final MessageQueue queue = me.mQueue;
        for (;;) {
            Message msg = queue.next(); // 当队列为空时,这里会一直阻塞
            if (msg == null) {
                // No message indicates that the message queue is quitting.
                return;
            }
            ...
            msg.target.dispatchMessage(msg);
            ...
            msg.recycleUnchecked();
        }
    }
MessageQueue.java
    MessageQueue(boolean quitAllowed) {
        mQuitAllowed = quitAllowed;
        mPtr = nativeInit();
    }
    Message next() {
        //当nextPollTimeoutMillis为-1时,nativePollOnce会一直等待直到有消息(且消息到了触发的时间了)返回
        //当nextPollTimeoutMillis为0时,nativePollOnce不会阻塞,会直接返回
        int nextPollTimeoutMillis = 0;
        for (;;) {
            //不断的从消息队列里面查询有没有可用的消息,nextPollTimeoutMillis是超时时间,超时时间未到或者队列为空,这里就会阻塞
            nativePollOnce(ptr, nextPollTimeoutMillis);
            final long now = SystemClock.uptimeMillis();
            Message msg = mMessages;
            msg = msg.next;
            msg.next = null;
            msg.markInUse();
            return msg;
        }
    }
    //Handler通过sendMessage发送消息后,最终都会调用这个enqueueMessage让消息根据时间入队列
    boolean enqueueMessage(Message msg, long when) {
        synchronized (this) {
            msg.markInUse();
            msg.when = when;
            Message p = mMessages;
            boolean needWake;
            //我们调用sendMessageAtFrontQueue时,这里的when==0,即插入消息到队列的头节点
            if (p == null || when == 0 || when < p.when) {
                // New head, wake up the event queue if blocked.
                msg.next = p;
                mMessages = msg;
                needWake = mBlocked;
            } else {
                needWake = mBlocked && p.target == null && msg.isAsynchronous();
                Message prev;
                //入队是根据消息时间进行排序,Message对象中实现了一个单链表
                for (;;) {
                    prev = p;
                    p = p.next;
                    if (p == null || when < p.when) {
                        break;
                    }
                    if (needWake && p.isAsynchronous()) {
                        needWake = false;
                    }
                }
                msg.next = p; // invariant: p == prev.next
                prev.next = msg;
            }
            // We can assume mPtr != 0 because mQuitting is false.
            if (needWake) {
                //开始处理消息了
                nativeWake(mPtr);
            }
        }
        return true;
    }
MessageQueue.cpp
    void MessageQueue::init(const sp<SurfaceFlinger>& flinger) {
        mFlinger = flinger;
        mLooper = new Looper(true);
        mHandler = new Handler(*this);
    }
1.线程的消息队列是怎么创建的
    1.子线程可以创建handler吗
        可以创建，前提是子线程创建Handler之前需要调用Looper.prepare()
    2.主线程的Looper和子线程的Looper有什么区别
        主线程的Looper是不可以退出的,ActivityThread类中main函数会自动创建
        子线程的Looper是可以退出的,使用时需要通过Looper.prepare自己创建
    3.Looper和MessageQueue有什么关系
        一个线程对应一个Looper,一个Looper对应一个MessageQueue
        一个Looper可能对应多个Handler(如主线程中创建多个Handler最终都是采用了主线程的Looper,且发送消息都是发送到主线程的MessageQueue)
    4.MessageQueue是怎么创建的
        java层的MessageQueue创建过程
            Looper.prepare会创建Looper对象保存到当前线程的ThreadLocal中
            Looper的构造函数中会创建MessageQueue对象,MessageQueue构造函数会调用nativeInit
        Native层的MessageQueue创建过程
            MessageQueue.cpp中的init函数会创建Native层的Looper和Handler

2.说说Android线程间消息传递机制
    1.异步通信前的准备
        准备Looper和MessageQueue,创建Handler,开启Looper循环,一个线程对应一个Looper
    2.消息循环过程是怎么样的
        通过Looper的loop方法可知,loop方法中有一个for死循环
            1.通过当前线程的messageQueue.next方法不断的从队列中取消息(当队列为空时,这里会阻塞)
            2.然后通过msg.target.dispatchMessage分发消息,
            3.然后通过msg.recycleUnchecked回收消息
    3.消息怎么发送的
        handler.sendMessage(msg)-->sendMessageDelayed(msg)-->sendMessageAtTime(msg,time)-->enqueueMessage
        最后会调用Native层的MessageQueue中的enqueueMessage将消息存放到队列中
    4.消息是怎么处理的
        找到消息对应的handler然后分发消息
        msg.target.dispatchMessage()

3.Handler的消息延时是怎么实现的
    1.消息延时是做了什么特殊处理吗
        消息队列按消息触发时间排序,越早触发的消息越排在队列的前面
    2.是发送延时了还是消息处理延时了,如何保证在延时时间点触发消息呢?
        消息处理延时了,设置epoll_wait的超时时间,使其在特定时间唤醒
    3.延时的精度怎么样
        精度不高,因为依赖epoll_wait的超时时间，且上一个消息处理时间不确定,会影响取下一条消息

4.说说idleHandler的原理
    public static interface idleHandler{
        boolean queueIdle()
    }
    1.idleHandler的作用及调用方式
        IdleHandler是MessageQueue类中的一个接口
        当messageQueue中没有消息了，或者所有的消息都还未到触发时间(pending message),就会回调queueIdle
        当我们在queueIdle中返回false后,那这个queueIdle后面就不会再回调了
    2.idleHandler的使用场景
        比如延迟初始化,检测到当handler空闲的时候再给某些模块初始化
    3.idleHandler的实现原理
        messageQueue的next方法中会判断当前队列是否空闲了,如果是就会回调queueIdle
    4.dleHandler的基本使用
        private MessageQueue.IdleHandler mIdleHandler = new MessageQueue.IdleHandler(){
            public boolean queueIdel(){
                return true
            }
        }
5.主线程进入了loop循环了为什么没有ANR
    1.了解ANR触发的原理
        在AMS中的子线程中弹出了一个dialog提示用户,应用无响应
        final void appNotResponding(ProcessRecord app,...){
            Message msg = Message.obtain()
            msg.what = SHOW_NOT_RESPONDING_MSG
            mUiHandler.sendMessage(msg)//Dialog d = new AppNotRespondingDialog();d.show()
        }
        触发ANR的原因有以下几种
            1.主线程耗时操作
                serviceTimeout
                broadcastTimeout
                providerTimeout
                inputDispatching Timeout
            2.其他进程占用CPU太多导致当前进程无法获取到CPU时间片
            3.主线程被其他线程锁死
        如ServiceTimeout是在realStartServiceLocked中触发的
        void realStartServiceLocked(ServiceRecord,ProcessRecord app,...){
            bumpServiceExecutionLocked(r,execInFg,"create")//执行scheduleServiceTimeoutLocked(r.app)
            app.thread.scheduleCreateService(r,r.serviceInfo)
        }
    2.了解应用大致启动流程
    3.了解线程的消息循环机制
    4.了解应用和系统的通信过程
    5.Android中为什么主线程不会因为Looper.loop()里的死循环卡死？
         Looper的loop函数在一个死循环中通过MessageQueue调用next函数(调用底层的nativePollOnce函数),这个next函数在没有消息时会阻塞休眠,但不会占用CPU资源
         当有消息过来的时候便会唤醒这个handler处理消息。
         这个机制就是Linux的epoll模型
            当没有消息的时候会epoll.wait,等待句柄写的时候再唤醒,这个时候是阻塞的
            所有的UI刷新都是通过handler发消息,如屏幕刷新就会有句柄写的操作,唤醒上文的wait操作,所以不会卡死
         既然是死循环又如何去处理其他事务呢？
            答案是通过创建新线程的方式,ActivityThread的main方法中的activityThread.attach方法就是绑定了Binder线程(ApplicationThread会接收AMS发送过来的Binder消息)
            该Binder线程通过Handler将Message发送给主线程

6.说说消息屏障
    1.什么是消息屏障what
        同步屏障只会在Looper死循环获取待处理的消息时才会起作用，即同步屏障在MessageQueue.next方法起作用
        在next方法中，有一个屏障的概念message.target == null时为屏障消息
        当遇到屏障消息时，会滤过同步消息，循环遍历找出下一条异步消息然后处理，执行完所有异步消息后，就处于阻塞状态
        直到移除同步屏障后，才开始执行同步消息，实现优先执行异步消息的功能

    2.怎么实现屏障消息
        1.handler的构造方法传async参数，设置为true,使用此Handler发送的消息都是异步的
        2.创建Message对象时，直接调用setAsynchronous(true)
        3.removeSyncBarrier移除同步屏障

        private int postSyncBarrier(long when){
            sychrounized(this){
                final int token = mNextBarrierToken++;
                final Message msg = Message.obtain()
                msg.markInUse()
                msg.when = when
                msg.arg1 = token
                //给这个msg按时间顺序插入到消息队列中
                return token
            }
        }

        插入屏障消息的特点
            1.这个消息没有handler，不需要分发
            2.这个消息带有时间戳,会影响后面消息的分发
            3.消息队列是可以插入多个消息屏障的
            4.没有唤醒线程
            5.插入屏障消息会返回一个token,便于执行屏障消息后移除这个消息屏幕

    2.什么场景下会使用消息屏障
        scheduleTraversals方法中会插入一个消息屏障拦截所有同步消息的执行,优先等待执行屏幕刷新工作
        当Vsync信号来了执行doTraversal方法时就会执行移除屏障消息
    3.消息屏障实现原理是什么


