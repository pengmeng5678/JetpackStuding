https://www.jianshu.com/p/71b847a7f7e3
https://cloud.tencent.com/developer/article/1194000
https://www.jianshu.com/p/e88f648cb2c1
以下分析Okhttp3.8.0版本为例,RxJavaAndRetrofit这个module依赖了okhttp3.8.0
    从三个方面来剖析Okhttp
        1.网络请求流程-会使用
        2.拦截器模式-易于扩展
        3.缓存和连接池-高性能
1.Okhttp的使用
    new OkHttpClient.Builder().build().newCall(new Request.Builder().url("http://www.baidu.com").headers().build()).enqueue(call);
    凡是Builder()后面都可以配置多个参数
        new OkHttpClient.Builder()还可以配置多个自定义的拦截器
        new Request.Builder()可以添加请求头、请求体等
2.Okhttp网络请求流程
    OkhttpClent
        1.OkhttpClient.newCall得到一个call，其实是RealCall对象
        2.OkhttpClient.newCall().enqueue(call),其实是调用了RealCall的enqueue方法
    RealCall
        1.enqueue方法其实是调用了dispatcher的enqueue方法
        2.内部类AsyncCall的实现方法execute
            1.通过拦截链获取响应结果返回给用户
                Response response = getResponseWithInterceptorChain();
            2.不管获取结果成功或者失败都会调用dispatcher的finish方法
                client.dispatcher().finished(this);
    Dispatcher
        1.设定最大请求数64，最大请求主机5,正在准备的异步队列A，正在进行的异步队列B,正在进行的同步队列C,队列类型为ArrayDeque
            即当前正在并发的请求个数不能超过64且同一个地址的访问不能超过5个
        2.enqueue方法
            根据判断条件将新的请求入队runningAsyncCalls.add(call);
            通过线程池execute这个请求,其实执行了RealCall的内部类AsyncCall的实现方法execute
            线程池默认用的类似CacheThreadPool,coolPoolSize=0,maxNumPoolSize=Integer.MAX_VALUE,keepAlive=60S,SynchronousQueue(每个插入等待另一个线程的移除,反之移除亦然)
        3.finish方法
            从当前队列中remove这个请求
            promoteCalls方法从readyAsyncCalls中拿一条新的call请求,继续通过线程池执行RealCall类的AnsycCall内部类的execute方法,如此反复
                该类中的setMaxRequest和setMaxRequestPerHost方法被调用也会执行promoteCalls方法
    RealInterceptorChain
        拦截器采用的设计模式是责任链模式，采用迭代+递归的方式获取所有拦截器的结果然后依次返回,最后将结果在dispatcher中回调给用户
        1.proceed方法
            1.根据index索引创建RealInterceptorChain对象实例next
            2.根据index索引获取Interceptors中的一个拦截器interceptor
            3.通过interceptor.intercept(next)执行拦截器的逻辑

            public Response proceed(Request request, StreamAllocation streamAllocation, HttpCodec httpCodec,RealConnection connection){
               //......
               calls++;
               RealInterceptorChain next = new RealInterceptorChain(
                                   interceptors, streamAllocation, httpCodec, connection, index + 1, request);
                   Interceptor interceptor = interceptors.get(index);
                   Response response = interceptor.intercept(next);
            }

        2.具体的拦截器的intercept方法,如okhttp3.internal.http.RetryAndFollowUpInterceptor.java
            最终又会调用RealInterceptorChain的proceed方法
            public Response intercept(Chain chain) throws IOException {
                Request request = chain.request();
                //......
                response = ((RealInterceptorChain) chain).proceed(request)
            }


3.RealCall中的getResponseWithInterceptorChain
    1.拦截链的类型介绍
        1.Client.interceptors:
            用户自定义的拦截器,能拦截所有的请求
        2.RetryAndFollowUpInterceptor：
            负责失败重连和重定向相关
            StreamAllocation是在这个interceptor中创建的
            在followUpRequest方法中判断是否需要重定向和是否需要重连,需要重连时会返回一个request
            当followUpRequest返回的request为null说明不需要重连,直接返回response
        3.BrideInterceptor:
            负责对Request和Response报文加工，以及Keep-Alive连接，Gzip,Cookie等可以优化请求
                1.请求从应用层数据类型转化为网络调用层的数据类型
                2.将网络层返回的数据类型转化为应用层数据类型
        4.CacheInterceptor:
            负责缓存管理,使用DiskLruCache做本地缓存，CacheStrategy决定缓存策略
        5.ConnectInterceptor:
            开始与目标服务器建立连接,获得RealConnection
        6.NetworkInterceptors(!forWebSocket):
            用户自定义的Interceptor，仅在生产网络请求时时生效
        7.CallServerInterceptor:
            向服务器发出一次网络请求的地方
    2.Interceptor接口
        //Interceptor是各种Interceptor的抽象接口
        public interface Interceptor{
            Response intercept(Chain chain) throws IOException;
            //Chain是RealInterceptorChain类的抽象接口
            interface Chain {
                Request request();
                Response proceed(Request request) throws IOException;
                Connection connect();
            }
        }
    3.创建RealInterceptorChain对象,将所有的interceptor添加到一起,开始执行
        public getResponseWithInterceptorChain(){
            List<Interceptor> interceptors = new ArrayList<>();
            //...add各种类型的interceptor
            Interceptor.Chain chain = new RealInterceptorChain(
                    interceptors, null, null, null, 0, originalRequest);
                return chain.proceed(originalRequest)
        }

        RealInterceptorChain的构造方法中的参数,会在后面的一个个interceptor拦截器中一步一步的赋值,
        因为每个拦截器都会将获取的参数依次传递给下一个参数

4.ReTryAndFollowUpInterceptor
    主要作用的失败重试和重定向功能
    1.重要逻辑解析
        public Response intercep(Chain chain) throws IOException{
            Request request = chain.request();
            //三个参数分别是：1.全局的连接池;2连接线路Address;3.堆栈对象
            streamAllo
            cation = new StreamAllocation(client.connectPool(),createAddress(request.url()),callStackTrace())
            //......
            while(true){
                //循环的作用就是不停的获取response，每次循环都会获取下一个request,如果没有就返回response退出循环。
                try {
                    //  执行下一个拦截器，即BridgeInterceptor
                    // 这里有个很重的信息，即会将初始化好的连接对象传递给下一个拦截器，也是贯穿整个请求的连击对象，上面我们说过，在拦截器执行过程中，RealInterceptorChain的几个属性字段会一步一步赋值
                    response = ((RealInterceptorChain) chain).proceed(request, streamAllocation, null, null);
                    releaseConnection = false;
                  } catch (RouteException e) {
                    //  如果有异常，判断是否要恢复
                    if (!recover(e.getLastConnectException(), false, request)) {
                      throw e.getLastConnectException();
                    }
                    releaseConnection = false;
                    continue;
                  }
                //......
                Request followUp = followUpRequest(response);
                if(followUp == null){
                    if(!forWebSocket){
                        streamAllocation.release();
                    }
                    return response;
                }
            }
        }

5.CacheInterceptor
    原理及注意事项
        1、原理
            (1)、okhttp的网络缓存是基于http协议
            (2)、使用DiskLruCache的缓存策略
        2、注意事项：
            1、目前只支持GET，其他请求方式需要自己实现。
            2、需要服务器配合，通过head设置相关头来控制缓存
            3、创建OkHttpClient时候需要配置Cache

    1.使用缓存的好处
        减少请求次数,减轻服务器压力
        本地数据读取更快,不会让页面空白几百毫秒
        无网络环境下可以使用缓存数据展现页面
    2.Cache-Control规则
        见Cache-Control缓存指令.png
        OkHttp中的CacheControl类就对应Http协议中的Cache-Control规则,他是对Cache-Control头部的描述
            noCache:出现在响应头部，表示客户端需要与服务器再次验证
            noStore:如果出现在响应头部,表明该响应不能被缓存
            maxAge:如果缓存满足到了最大存活时间,那么将不会再进行网络请求
            onlyCached:用于请求头部,表示该请求只接受缓存中的响应,如果缓存中没有响应,就会响应一个504的错误码

    3.常见服务器错误码
        301:永久性重定向
        403:请求资源被服务器拒绝了
        404:服务器上无法找到请求的资源
        500：服务器在执行请求时发生了错误
        503：服务器暂时处于超负载或正在进行停机维护,现在无法处理请求,服务器可以通过RetryAfter首部字段再返回给客户端
        504：onlyCached(如飞行模式),客户端只接受缓存中的响应，而缓存没有命中或者缓存过期了，服务器就响应一个504错误码

    4.OkHttp的CacheStrategy类详解：Strategy[ˈstrætədʒɪ]
        1.Http缓存流程
            Http缓存流程见图片：http缓存流程图.png
            CacheStrategy类实现了Http缓存流程的所有功能
        2.Okhttp缓存策略

            在Okhttp的CacheInterceptor类的intercept方法中执行缓存策略，详情见CacheStrategy策略原理：

            networkRequest   cacheResponse                          result结果

                null            null                only-if-cached，表明不进行网络请求,不存在或过期就直接返回504错误码
                null            non-null            不进行网络请求,直接返回缓存
                non-null        null                需要进行网络请求,且缓存不存在或失效,就直接访问网络
                non-null        non-null            Header中包含ETag/Last-Modified标签,需要在满足条件下请求,还是需要访问网络

    5.OkHttp的Cache类实现InternalCache接口
        1.Cache对象拥有一个DiskLruCache的引用
            private final DiskLruCache cache;
            public Cache(File directory,long maxSize){
                this(directory,maxsize,FileSystem.SYSTEM)
            }
            Cache(File directory,long maxSize,FileSystem fileSystem){
                this.cache = DiskLruCache.create(fileSystem,directory,VERSION,ENTRY_COUNT,maxSize);
            }
        2.Cache构造器接收两个参数，意味着我们创建一个缓存必须要指定缓存目录和缓存文件的最大值
        3.Cache类的增删改查
            put:如果请求不是Get请求，就直接返回null;非Get方法会根据请求报文参数的不同得到不同的Response,因此缓存效率会很低
                CacheRequest put(Response response){
                    if(!requestMethod.equals("GET")){
                        return null;
                    }
                    if(HttpHeaders.hasVaryAll(response)){
                        return null;//请求的http数据包中headers是否有符号*的通配符,有则不缓存直接返回
                    }
                    Cache.Entry entry = new Cache.Entry(response)
                    DiskLruCache.Editor editor = null
                    editor = cache.editor(key(response.request().url()))
                    if(editor == null) return null;
                    //方法内部是通过Okio.buffer(editor.newSink(ENTRY_METADATA))获取到一个BufferSink对象,随后将Entry中存储的http报头数据写入到sink流中
                    entry.writeto(editor)
                    return new Cache.CacheRequestImpl(editor)
                }

            remove:
                void remove(Request request) {
                    cache.remove(key(request.url()))
                }
                public static String key(HttpUrl url){
                    return ByteString.encodeUtf8(url.toString()).md5().hex();//key方法就是获取url的MD5和hex生成的key
                }

    6.DiskLruCache
        三个内部类
            Entry：用于存储缓存数据的实体类,一个Url对应一个Entry
            SnapShot:一个Entry对应一个SnapShot
            Editor：操作SnapShot的类
        1.重要属性
            private final LinkedHashMap<String, Entry> lruEntries = new LinkedHashMap<>(0,0.75f,true)
            private final Executor executor:用于清理、维护缓存数据
        2.构造函数和创建对象
            public static DiskLruCahe create()(FileSystem fileSystem, File directory, int appVersion,int valueCount, long maxSize) {
                Executor executor = new ThreadPoolExecutor(0, 1, 60L, TimeUnit.SECONDS,
                        new LinkedBlockingQueue<Runnable>(), Util.threadFactory("OkHttp DiskLruCache", true));
            }
        3.初始化
            public synchronized void initialize() throws IOException {}

        4.关于Cache类的增删改查方法
        5.总结DisLruCache的主要特点
            1、通过LinkedHashMap实现LRU替换
            2、通过本地维护Cache操作日志保证Cache原子性与可用性，同时为防止日志过分膨胀定时执行日志精简。
            3、 每一个Cache项对应两个状态副本：DIRTY，CLEAN。CLEAN表示当前可用的Cache。外部访问到cache快照均为CLEAN状态；DIRTY为编辑状态的cache。由于更新和创新都只操作DIRTY状态的副本，实现了读和写的分离。
            4、每一个url请求cache有四个文件，两个状态(DIRY，CLEAN)，每个状态对应两个文件：一个0文件对应存储meta数据，一个文件存储body数据。

        6.流程
            1.如果配置了缓存，则从缓存获取，可能为null
            2.获取缓存的策略
            3.监测缓存
            4.如果禁止使用网络(如飞行模式)，且缓存无效,直接返回504
            5.如果缓存有效，使用缓存，不使用网络
            6.如果缓存无效，执行下一个拦截链
            7.本地有缓存,根据条件判断使用缓存还是网络的response
            8.把response缓存到本地
