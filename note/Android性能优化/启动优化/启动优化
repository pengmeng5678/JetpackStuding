https://github.com/JsonChao/Awesome-Android-Interview
https://blog.csdn.net/qian520ao/article/details/81908505
https://www.jianshu.com/p/a5353748159f
https://github.com/NoEndToLF/AppStartFaster.git
1.认识App启动加速
    冷启动:较慢,指App进程被杀死后,再启动App就叫冷启动()
    热启动:很快,指App进程按Home键后在后台运行,再启动App到前台运行就叫热启动
    温启动:较快,温启动会执行一次Activity的生命周期
    启动过程
        冷启动前:
            加载启动App
            启动后展示一个空白View
            创建App进程
        冷启动后:
            创建App对象
            启动Main Thread
            创建启动的Activity对象
            加载View布局
            布置屏幕
            首帧绘制
    优化方向:Application和Activity生命周期
    启动时间测量方式
        1.adb命令(线下)
            adb shell am start -W packageName/pakageName.MainActivity
                thisTime：最后一个Activity启动时间
                totaltime:启动一连串Activity的时间
                waitime:创建进程的时间+totaltime
        2.手动打点(线上)
             开始时间:attachBaseContext
             结束时间:onWindowFocusChanged(Activity首帧时间),
                     或者监听ListView第一条显示时的时间更准确,如onBindViewHolder中调用
                        holder.linearLayout.getViewTreeObserver().addOnPreDrawListener
2.启动时间检测工具
        wall time指代码执行时间，耗时较长
        CPU time(Thread time)指CPU执行时间,耗时较短(以锁冲突分析)，我们应该优化这个指标
    1.TraceView(CPU Profiler)
        作用:主要做热点分析，可以以图形形式展示函数执行时间、调用栈等
        使用:
            1.方法的开头和结尾分别添加Debug.startMethodTracing("App"),Debug.stopMethodTracing(),生成文件存放于sd卡,Android/data/packageName/files/App.traces
            2.点击这个文件,AS底部会显示四个栏目
                *Call Chat:以图表形式展示函数调用链
                    橙色表示系统API,绿色表示应用自身函数,蓝色表示第三方库的Api
                Flame Chat:
                    火焰图主要展示被多次频繁调用的函数链
                *Top Down:以文字形式展示函数调用链
                    点击Top Down中的一个方法,查看右边的数据,Total表示该方法执行总耗时,self表示这个方法自身耗时,children表示这个方法调用其他函数的耗时
                Bottom up:

    2.systrace
        通过AndroidSdk/tools/monitor.bat打开Monitor工具
        作用:结合Android内核的数据,生成Html报告;API18以上使用,推荐TraceCompat
        使用:
            执行脚本:python systrace.py -t 10 [other-options][categories]
            使用文档:https:developer.android.com/studio/command-lin/systrace#command_options

            1.在方法的开头和结尾分别调用:TraceCompat.beginSection(),TraceCompat.endSection()
            2.运行App,执行python脚本,点击App就可以看到命令行中显示报告生成结果,performance.html
        特点:
            轻量级,开销小
            直观反映CPU利用率
    3.AOP(Aspect Oriented Programming,面向切片编程)函数埋点
        作用：
            传统函数打点侵入性强,代码量大，不够优雅,我们可以采用AOP的方式进行埋点,它可以针对同一类问题进行统一处理,无侵入添加代码
        使用:
            使用aspectjx框架,详情见AOP思想.txt

3.怎么优化
    1.优化区域：Application、Activity创建
    2.优化手段
        1.利用主题曲防止出现白屏,给启动页设置一个Theme属性,在windowBackground标签下设置默认图片替代白屏
            1.在清单文件中的Activity设置这个Theme属性设置Activity默认显示图
            2.在Activity的super.onCreate之前切换成自己真正的Theme,setTheme(R.style.xxx)

        2.减少Application、Activity中做的事,不重要的SDK懒加载、异步加载。能异步执行的全部异步执行
            1.常规优化方式
                1.在Application中根据CPU核心数创建一个线程池,将耗时任务放到子线程执行
                    CPU_COUNT = Runtime.getRuntime().availableProcessors()
                    int CORE_POOL_SIZE = Math.max(2,Math.min(CPU_COUNT -1,4))
                    ThreadPoolService service = Excutors.newFixThreadPool(CORE_POOL_SIZE,xxx)
                    将所有初始化任务分别使用service.submit处理

                2.如果异步任务之间有依赖关系,那么可以使用CountDownLatch进行异步等待
                    调用CountDownLatch.await()方法的线程，如果count>0会被挂起，它会等待直到count值为0才继续执行
                    调用CountDownLatch.countDown() { };  //将count值减1

            2.异步优化的最优解:启动器
                常规异步缺点：代码不优雅、异步依赖关系不太好控制

                代码Task化,启动逻辑抽象成Task
                根据所有任务依赖关系排序生成一个有向无环图
                多线程按照排序后的优先级一次执行

        3.延迟初始化、懒加载
             常规延迟初始化:Handler.postDelay()
             更优延迟初始化:启动器中可以使用IdleHandler处理执行时机不严格的任务,避免页面卡顿,提高用户体验
        4.SharedPreferences优化
            getSharedPreferences会加载文件中的xml文件,此时如果调用get/put操作会阻塞,我们可以在Multidex之前加载,利用此阶段CPU

        5.5.0以下的系统multidex预加载优化。https://www.jianshu.com/p/e164ee033928  https://www.jianshu.com/p/2891599511ff

            MultiDex第一次加载出现ANR的原因是因为提取Dex以及DexOpt这两个过程都是耗时的操作，而且他们还都发生在主进程
            5.0以下的系统冷启动时MultiDex工作流程如下
                APP启动->一系列校验初始化->提取Dex->强行提取或修改过->重新提取Dex->原始Apk解压得到Dex，写成Zip文件->动态装载得到Zip文件-运行
                                                ->强行提取或修改过->提取缓存Dex-------------------------------->动态装载得到Zip文件-运行
            5.0以下系统优化过程如下
                optimizing['ɑptə,maɪz]
                首先MyApplication不再继承MultiDexApplication
                App启动->是否执行过Dex优化->有就执行主线程的MultiDex.install->执行
                                        ->没有就单开进程等待->子线程中执行优化操作->主进程MultiDex.install->执行
            5.0以上的系统默认使用ART虚拟机,与Dalvik的区别在于安装时已经将全部的Class.dex转换为了oat文件，优化过程在安装时已经完成,因此无需执行

        4.简单理解multidex加载过程
            1.安装完app点击桌面图标时，系统发现没有这个进程,于是从该apk抽取classes.dex(主dex)加载,触发一次dexopt
            2.App的launchActivity准备启动,触发Application启动，Application的onAttach方法调用,这个时候MultiDex.install调用,class2.dex被调用,再次触发dexopt
            3.然后Application onCreate执行,然后launcher Activity真的起来了

        5.multidex冷启动优化方案
            1.冷启动时,Application不再继承MultiDexApplication,重写onAttachBaseContext方法
            2.在onAttachBaseContext方法中启动Splash界面,开始轮询dexOpt工作是否完成，在Splash界面加载Dex(子dex,通过MultiDex.install加载)

4.相关命令
    获取所有应用的堆栈信息 adb shell dumpsys activity
    获取自己应用的堆栈信息 adb shell dumpsys | grep packageName
    adb启动一个Activity   adb shell am start packageName/.MainActivity(如adb shell am start com.sanbot.www.childteach/.MainActivity)
    adb统计启动时间       adb shell am start -W packageName/Activity的全路径名(如packagename.MainActivity)
        Starting: Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] cmp=com.qihancloud.zhiyin/.ui.activity.MainActivity }
        Status: ok
        Activity: com.qihancloud.zhiyin/.ui.activity.MainActivity
        ThisTime: 2173      最后一个Activity启动耗时
        TotalTime: 2173     启动一连串Activity总耗时(有几个就统计几个)
        WaitTime: 2211      应用进程的创建时间+TotalTime
        Complete
    获取在As中过滤Displayed字段也可看到整个应用的启动时间

5.界面秒开实现
    1.实现方案
        SysTrace,优雅异步+优雅延迟初始化
        异步Inflate、X2C、绘制优化
        提前获取页面数据
    2.界面秒开率统计
        onCreate到onWindowFocusChanged
        特定接口
    3.Lancet：轻量级Android AOP框架，编译速度快，支持增量编译,API简单
        @Proxy 通常用于对系统API调用的Hook
        @Insert常用于操作App与library的类
        示例如下
            public class ActivityHooker{
                @Proxy("i")
                @TargetClass("android.util.Log")
                public static int i(String tag,String msg){
                    //Hook日志类中的i方法,直接将方法签名拷贝过来,再加上注解和新增逻辑
                    msg = msg + "ActivityHooker";
                    return (int)Origin.call();
                }
            }
    4.界面秒开监控维度
        总体耗时
        生命周期耗时
        生命周期间隔耗时

6.启动优化模拟面试
    1.你做启动优化是怎么做的
        分析现状、确认问题
        针对性优化
        长期保持优化效果
    2.是怎么异步的，异步遇到问题没有
        体现演进过程
        介绍启动器 https://github.com/NoEndToLF/AppStartFaster.git
    3.你做了启动优化,你觉得有哪些容易忽略的注意点
        1.cpu time与wall time区别
        2.注意延迟初始化的优化
    4.版本迭代导致的启动变慢有好的解决办法吗
        1.启动器
        2.结合CI
        3.监控完善
