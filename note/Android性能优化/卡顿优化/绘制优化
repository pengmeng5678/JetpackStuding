https://www.jianshu.com/p/4f44a178c547
1.认识绘制优化
    要确保刷新帧率>60fps,完成单次刷新<16ms，即保证稳定的帧率避免卡顿
    过度绘制是指在在同一帧时间内，屏幕上某个像素区域被绘制了多次。在多层次像素重叠时,不可见的UI也在进行绘制,从而浪费CPU和GPU资源

2.卡顿检测工具
    1.layout inspector,只能分析AndroidStudio正在运行的App视图布局结构
    2.卡顿检测工具：
        监听Looper日志实现,开源的AndroidperformanceMonitor(BlockCanary),
        利用Choreographer的Takt和TinyDancer
        GPU配置渲染工具，从Android M开始,渲染的8个步骤
3.绘制优化
    1.避免过度绘制
        GPU过度绘制5中的区域颜色：蓝色1次，绿色2次，粉色3次，红色4次。标准是蓝色及以下，过度绘制通过以下方式解决
            1.处理有图片背景的的区域在代码里有选择的取出背景
            2.有选择性的移除窗口背景,getWindow().setBackgroundDrawable(null)
            3.自定义View中使用Cavas.clipRect
    2.减少嵌套层次和控件个数
        布局加载原理：LayoutInflater通过Pull解析方式解析各个XML文件中的节点,再将各个节点通过反射创建出View的对象实例
        可按照以下顺序进行优化
            1.TextView替换RL、LL
            2.使用低端机进行优化、发现性能瓶颈
            3.使用merge、ViewStub标签
            4.onDraw方法不能进行复杂运算
            5.lint+alibaba规约修复点
            6.使用约束布局Constrailayout
            7.自定义style
