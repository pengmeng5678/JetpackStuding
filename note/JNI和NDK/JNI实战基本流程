#本文主要整理JNI实战基础相关内容
https://www.jianshu.com/p/b4431ac22ec2
大纲
    1.传统方式的具体流程
    2.传统方式的相关问题
    3.传统方式的so文件
    4.通过CMake工具demo演示流程
    5.CMake工具demo的背后原理
    6.CMake工具demo演示流程
    7.使用experimental-plugin插件编译

具体内容
1.传统方式的具体流程
    1.创建项目
    2.创建引用本地库的工具类
        public class NDKTools{
            public static native String getStringFromNDK();
        }
    3.修改相关UI显示
        textView.setText(NDKTools.getStringFromNDK())
    4.获取classes文件
        Build -> Make Project
    5.进入相应目录
        build\intermediates\classes\debug\包名\NDKTools.class
    6.获取.h文件
        1.命令行进入到debug目录  cd build\intermediates\classes\debug
        2.javah -jni 包名.NDKTools
        3.build\intermediates\classes\debug目录下的.h文件
    7.增加对应的custom_ndkdemo_NDKTools.c文件
        1、在src/main目录下新建jni目标
        2.将.h文件复制到jni目录
        3.jni目录下新建custom_ndkdemo_NDKTools.c文件
    8.编写custom_ndkdemo_NDKTools.c文件
        #include "com_jni_demo_customjni_NDKTools.h"
        JNIEXPORT jstring JNICALL Java_com_jni_demo_customjni_NDKTools_getStringFromNDK
                (JNIEnv *env, jobject jclass){
            return (*env)->NewStringUTF(env,"Hellow world,菜鸟");
        }
    9.添加并编写Android.mk文件
        LOCAL_PATH := $(call my-dir)        #每个Android.mk文件必须以定义开始，用于开发tree中查找源文件
        include $(CLEAR_VARS)               #负责清理很多LOCAL_XXX
        LOCAL_MODULE := ndkdemotest-jni     #名字必须唯一且不包含空格，要生成动态库就是ndkdemotest-jni.so
        LOCAL_SRC_FILES := ndkdemotest.c    #表示将要打包的C/C++源码
        include $(BUILD_SHARED_LIBRARY)     #负责收集自从上次调用include $(CLEAR_VARS)后所有的LOCAL_XXX
            BUILD_STATIC_LIBRARY    ：编译为静态库
            BUILD_SHARED_LIBRARY    ：编译为动态库
            BUILD_EXECUTABLE        ：编译为Native C 可执行程序
            BUILD_PREBUILT          ：该模块已经预先编译

    10.修改相应的配置文件
        1.local.properties的ndk.dir
        2.app的build.gradle中defaultCofig的ndk标签
            ndk{
                moduleName "ndkdemotest-jni"
                abiFilters "armeabi-v7a"
            }
        3.app的build.gradle中buildTypes中的externalNativeBuild和sourceSet.main
            externalNativeBuild{
                ndkBuild{
                    path 'src/main/jni/Android.mk'
                }
            }
            sourceSets.main{
                jni.srcDirs = []
                jniLibs.srcDirs = ['src/main/jniLibs']
            }
    11.修改引用类
        在NDKTools类中加入
        static {
            System.loadLibrary("ndkdemotest-jni");
        }
    12.查看传统方式编译出来的so库
        目录位于：\build\intermediates\ndkBuild\debug\obj\local\armeabi-v7a\objs-debug


2.CMake工具Demo的背后原理
    1.CMake的入口
        AS在run的时候是gradle打包的，所以CMake一定在build.gradle有相应的入口,如
            externalNativeBuild {
                cmake {
                    path "CMakeLists.txt"
                }
            }

        defaultConfig外面的 externalNativeBuild - cmake，指明了 CMakeList.txt 的路径；
        defaultConfig 里面的 externalNativeBuild - cmake，主要填写 CMake 的命令参数。
        即由 arguments 中的参数最后转化成一个可执行的 CMake 的命令，
        可以在 app/externalNativeBuild/cmake/debug/{abi}/cmake_build_command.txt中查到

    2.CMakeList.txt
        CMakeList中文手册   https://www.zybuluo.com/khan-lau/note/254724
        cmake_minimum_required(VERSION 3.4.1)：指定CMake的最小版本
        add_library：创建一个静态或者动态库，并提供其关联的源文件路径,开发者定义多个库，CMake会自动构建它们
            参数1————native-lib是库的名称
            参数2————SHARED是库的类别，是动态或静态
            参数3————src/main/cpp/native-lib.cpp：是库的源文件的路径
        find_library:找到一个预编译的库，并作为一个变量保存起来
            参数1————log-lib:设置路径变量的名称
            参数2————log：指定NDK库的名字，这样CMake就可以找到这个库
        arget_link_libraries：指定CMake链接到目标库
            参数1——native-lib：指定的目标库
            参数2——${log-lib}：将目标库链接到NDK中的日志库

    3.CMake的运转流程
        1.Gradle调用外部构建脚本CMakeList.txt
        2.CMake按照构建脚本的命令将C++源文件native-lib.cpp编译到共享的对象库中，并命令为libnative-lib.so
          Gradle随后会将其打包到APK中
        3.运行时，应用的MainActivity会使用System.loadLibrary加载原生库，应用就是可以使用库的原生函数stringFromUI()

3.CMake应用
    确保本地有CMake,在SDK Tools下手动安装
    在已有工程中使用CMake
    1.创建源文件
        在main目录下新建一个目录，如cpp目录，在该目录下新建C++源文件，名为native-lib
    2.创建CMake构建脚本CMakeLists.txt
        该文件与src目录同级
    3.向CMake脚本文件写入数据
        cmake_minimum_required(VERSION 3.4.1)
        add_library(
                    native-lib
                    SHARED
                    src/main/cpp/native-lib.cpp )
        find_library(
                      log-lib
                      log )
        target_link_libraries(
                      native-lib
                      ${log-lib})
    4.向Gradle关联到原生库
        要将Gradle关联到原生库，需要提供一个指向CMake或ndk-build脚本文件的路径
        在构建应用时，Gradle会以依赖项的形式运行CMake或ndk-build，并将共享的库打包到APK中

        在build.gradle的android标签下添加externalNativeBuild
            externalNativeBuild {
                cmake {
                    path 'CMakeLists.txt'
                }
            }
    5.查看CMake构建的NDK应用的so库
        位于build/intermediates/cmake/debug/obj/armeabi-v7a目录下
























