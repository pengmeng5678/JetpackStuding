本文整理JNI入门的相关知识点
https://www.jianshu.com/p/87ce6f565d37：
1.什么是NDK
    NDK全称是Native Develop Kit,Android NDK是一套工具集合，允许你使用C/C++语言来实现应用程序的功能
2.为什么使用NDK
    1.在平台之间移植其应用
    2.重复使用现在的库，或者提供自己的库重复使用
    3.某些情况下提高性能，特别是游戏这种计算密集型应用
    4.不依赖Dalvik JAVA虚拟机的设计
    5.代码保护，C/C++比java更难反编译
3.JNI
    3.1 什么是JNI
        JNI全称java Native Interface,即java本地接口，JNI是Java调用Native语言的一种特性
    3.2 为什么需要JNI
        因为在实际需求中，需要Java和C/C++代码进行交互，通过JNI可以实现java代码与C/C++代码的交互
    3.3 JNI的优势
        主要优势在于：它在设计初就确保了二进制的兼容性，这里并不特比针对Dalvik虚拟机,JNI适用于所有JVM
    3.4 如何实现JNI
        1.JNI的三个角色
            C/C++代码(so库)，本地方法接口类，Java层中具体业务类
        2.JNI的命名规则，举例如下
            JNIExport jstring JNICALL Java_com_example_hellojni_MainActivity_stringFromJNI( JNIEnv* env,jobject thiz )
            jstring是返回值类型，Java_com_example_hellojni是包名，MainActivity是类名，stringFromJNI是方法名
            其中JNIExport和JNICALL是不固定保留的关键字不用修改
        3.JNI开发流程的步骤
            1.声明java方法
            2.编译java源文件javac得到.class文件
            3.通过javah -jni命令导出JNI的.h头文件
            4.使用java需要交互的本地代码，实现在Java中声明的Native方法(如果java需要与C++交互，那么就用C++实现java的Native方法)
            5.将本地代码编译成动态库(Windows系统下是.dll文件，如果是Linux系统下是.so文件，如果是Mac系统下是.jnilib)
            6.通过java命令执行Java程序，最终实现java调用本地的代码
    3.5 JNI的结构
        jdouble Java_pkg_Cls_f__ILjava_lang_String_2 (JNIEnv *env, jobject obj, jint i, jstring s) {
            const char *str = (*env)->GetStringUTFChars(env, s, 0);
            (*env)->ReleaseStringUTFChars(env, s, str); return 10;
        }
        *env：一个接口指针
        obj:在本地方法中声明的对象和引用
        i和s：用于传递的参数

    3.6 JNI的原理
            每种编程语言都有一个执行环境,执行环境用来解释执行语言中的语句，java语言的执行环境是java虚拟机JVM
        JVM其实是主机环境中的一个进程，每个JVM都在本地环境有一个javaVM结构体，该结构体在创建Java虚拟机时被返回
        在JNI环境中创建JVM的函数为JNI_CreateJavaVM

        1.javaVM
            JavaVM是java虚拟机在JNI层的代表，JNI全局仅仅有一个JavaVM结构中封装了一些函数指针
            javaVM中封装的这些函数指针主要是对JVM操作接口
        2.JNIEnv
            JNIEnv是什么
                JNIEnv是一个线程相关的结构体，该结构体代表了Java在本线程的执行环境
                一个JVM对应一个JavaVM结构，而一个JVM中可能创建多个Java线程，每个java线程对应一个JNIEnv结构，他们保存在本地存储TLS中
            JNIEnv和JavaVM区别
                JavaVM:JavaVM是Java虚拟机在JNI层的代表，JNI全局仅仅有一个
                JNIEnv：JavaVM在线程中的代码，每个线程都有一个JNIEnv,JNI可能有非常多的JNIEnv
            JNIEnv的作用
                调用java函数，JNIEnv代表了Java执行环境，能够使用JNIEnv调用java中的代码
                操作java代码，java对象创建JNI层就是jobject对象，需要使用JNIEnv来操作这个对象

            1.JNIEnv的创建
                JNIEnv的创建于释放，从JavaVM获得，又分为C和C++
                    C 中——JNIInvokeInterface：JNIInvokeInterface是C语言环境中的JavaVM结构体，
                调用 (AttachCurrentThread)(JavaVM, JNIEnv*, void) 方法，能够获得JNIEnv结构体
                    C++中 ——_JavaVM：_JavaVM是C++中JavaVM结构体，
                    调用jint AttachCurrentThread(JNIEnv** p_env, void* thr_args) 方法，能够获取JNIEnv结构体；

            2.JNIEnv的释放
                    C 中释放：调用JavaVM结构体JNIInvokeInterface中的(DetachCurrentThread)(JavaVM)方法，
                能够释放本线程的JNIEnv
                    C++ 中释放：调用JavaVM结构体_JavaVM中的
                jint DetachCurrentThread(){
                    return functions->DetachCurrentThread(this);
                } 方法，就可以释放 本线程的JNIEnv

            3.JNIEnv与线程
                JNIEnv是线程相关的，即在每个线程中都有一个JNIEnv指针，每个JNIEnv都是线程专有的，
                其他线程不能使用本线程中的JNIEnv，所以JNIEnv不能跨线程
                    JNIEnv只在当前线程有效，同一个线程，多次调用JNI层方法，传入的JNIEnv是相同的
                    本地方法匹配多个JNIEnv，在java层定义的本地方法，能够在不同的线程调用，因此能够接受不同的JNIEnv

            4.JNIEnv的结构
                JNIEnv是一个指针，指向一个线程相关的结构，线程相关结构指向JNI函数指针数组，这个数组中存放了大量的JNI函数指针，
                这些指针指向了详细的JNI函数，具体见JNIEnv结构.pjg

            5.与JNIEnv相关的常用函数
                1.创建Java中的对象
                    jobject NewObject(JNIEnv *env,jclass clazz,jmethodID methodID,..)
                2.创建Java类中的String对象
                    //通过Unicode字符的数组来创建一个新的String对象，env是JNI接口指针，unicodeChars是指向Unicode字符串的指针
                    jstring NewString(JNIEnv *env,const jchar *unicodeChars,jsize len)
                    jstring newStringUTF(JNIEnv *env,const char *bytes)
                3.创建类型为基本数据类型Primitive Type的数组
                    //指定一个长度然后返回相应的Java基本类型的数组
                    ArrayType New<Primitive Type>Array(JNIEnv *env,jsize length)
                4.获取数组中 某个位置的元素
                    jobject GetObjectArrayElement(JNIEnv *env,jobjectArray,jsize index)
                5.获取数组的长度
                    jsize GetArrayLength(JNIEv *env,jarray array)

    3.7 JNI的引用
        1.局部引用
            也叫本地引用，通常是在函数中创建并使用，会组织GC回收所有引用对象
            局部引用在该native函数有效，所有函数中产生的局部引用，都会在函数返回的时候自动释放
            也可以使用DeleteLocalRef函数手动释放该应用
        2.全局引用
            全局引用可以跨方法，跨线程使用，直到被开发者显示释放
            能创建全局引用的函数只有NewGlobalRef，而释放它需要使用ReleaseGlobalRef函数
        3.弱全局引用
            JDK1.2新增功能，与全局引用类似，创建和删除都有开发者进行，
            不同的是弱引用将不会阻止垃圾回收器回收这个引用所指向的对象，所以使用弱引用要小心
        4.引用比较
            不管是什么引用，我们可以调用IsSameObject函数来判断他们是否指向相同的对象
            JNI中的NULL引用指向JVM中的null对象，如果obj是一个全局或者局部引用，那使用
            (*env)->IsSameObject(env,obj,Null)或obj == NULL用来判断obj是否指向一个null对象既可

4.Android.mk
    Android.mk文件主要用来向编译系统描述你的源代码，该文件时GNU Makefile的一小部分
    会被编译系统解析一次或多次，你可以在每一个Android.mk文件中定义一个或多个模块，每个模块属于下列类型之一
        1）APK程序，一般的Android程序，编译打包生成apk文件
        2）JAVA库，java类库，编译打包生成jar文件
        3)  C\C++应用程序，可执行的C\C++应用程序
        4）C\C++静态库，编译生成C\C++静态库，并打包成.a文件
        5）C\C++共享库， 编译生成共享库（动态链接库），并打包成.so,有且只有共享库才能被安装/复制到您的应用软件（APK）包中