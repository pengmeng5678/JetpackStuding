本文介绍JNI动态注册流程(通过Android.mk)
1.java类中声明本地方法
    public class NDKCalculatorTool {
        static {
            System.loadLibrary("calculatorcustomndk");
        }
        public static native int add(int a,int b);
        public static native int sub(int a,int b);
        public static native int mul(int a,int b);
        public static native int div(int a,int b);
        public static native int square(int a);
    }
2.定义Android.mk
    LOCAL_PATH := $(call my-dir)
    include $(CLEAR_VARS)
    LOCAL_MODULE    := calculatorcustomndk
    LOCAL_SRC_FILES := calculatorCustomDynamicRegistion.c
    LOCAL_LDLIBS :=  -L$(SYSROOT)/usr/lib -llog
    include $(BUILD_SHARED_LIBRARY)
3.创建jni文件夹，创建c/c++文件
    1.声明java中要实现的本地方法
        jint addNumber(JNIEnv *env,jclass clazz,jint a,jint b);
        jint subNumber(JNIEnv *env,jclass clazz,jint a,jint b);
        jint mulNumber(JNIEnv *env,jclass clazz,jint a,jint b);
        jint divNumber(JNIEnv *env,jclass clazz,jint a,jint b);
        jint squareNumber(JNIEnv *env,jclass clazz,jint a);
    2.创建JNI_OnLoad方法入口
        1.判断版本是否正确
            if((*vm)->GetEnv(vm,(void**)&env,JNI_VERSION_1_6)!=JNI_OK){
                    return result;
            }
        2.注册声明的所有本地方法，注意签名
            1.签名格式
                const JNINativeMethod method[] = {
                    {"add","(II)I",(void*)addNumber},
                    {"sub","(II)I",(void*)subNumber},
                    {"mul","(II)I",(void*)mulNumber},
                    {"div","(II)I",(void*)divNumber},
                    {"square","(I)I",(void*)squareNumber}
                };
            2.获取java类中所有本地方法的签名
                AS的命令行cd 进入build/intermediates/classes/debug目录下
                javap -s -p NDKCalculatorTool.class

            3.找到对应的NDKCalculatorTool类
              jclass jClassName = (*env)->FindClass(env,"demo/studing/com/jni/customjni/NDKCalculatorTool");

            4.开始注册
              jint ret = (*env)->RegisterNatives(env,jClassName,method,5);

4.修改app的build.gradle文件编译NDK应用
    android/default标签下定义ndk
        ndk{
            moduleName "calculatorcustomndk"
            abiFilters 'x86','armeabi-v7a','arm64-v8a'
            ldLibs "log"
        }

5.如何将编译好的so文件给其它开发者使用
    1.打开build/intermediates/ndkBuild/debug目录
    2.拷贝目录下的so文件到工程libs/armeabi-v7a下
    3.app的build.gradle文件的buildTypes标签下定义
        sourceSets.main{
            jni.srcDirs = []//禁止gradle自动编译，使用已经编译好的so库
            jniLibs.srcDirs = ['src/main/jniLibs','libs']//指向要使用的库文件的路径，前边是自己项目的，后边的是第三方的so库
        }
    4.注释掉android/default标签下的ndk，这样就不会再编译NDK应用了。调用java本地方法时就会直接调用so库中的方法
        ndk{
            moduleName "calculatorCustomNDK"
            abiFilters 'x86','armeabi-v7a','arm64-v8a'
            ldLibs "log"
        }

6.注意点：
    1.c/c++,.h等文件如果被加密会导致编译通不过
    2.先写txt文件用notepadd++打开，然后编辑文件名和内容保存，再把txt后缀改成.c/.cpp，然后替换掉被加密的c/c++文件